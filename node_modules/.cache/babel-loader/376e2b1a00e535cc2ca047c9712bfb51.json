{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport rs from \"random-seed\";\nimport words1 from \"./files/shuffled_real_wordles.txt\";\nimport words2 from \"./files/combined_wordlist.txt\";\nimport { Navigate, useParams } from \"react-router\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\nfunction Wordle() {\n  _s();\n  const [devTools, toggleDev] = useState(0);\n  const [hardReset, toggleHardReset] = useState(0);\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  const [win, setWin] = useState(false);\n  const [rightLetters, setRight] = useState([]);\n  const [missedLetters, setMissed] = useState([]);\n  const [wrongLetters, setWrong] = useState([]);\n  const [winCount, setWinCount] = useState(0);\n  const [winStreak, setWinStreak] = useState(0);\n  const [wordBank, setWordBank] = useState([]);\n  const [guessBank, setGuessBank] = useState([]);\n  const [showWord, toggleShowWord] = useState(false);\n  const [showIssue, toggleIssue] = useState(false);\n  const [started, toggleStarted] = useState(false);\n  const [startTime, setStartTime] = useState(0);\n  const [endTime, setEndTime] = useState(0);\n  const [totalTime, setTotalTime] = useState(0);\n  const [issue, setIssue] = useState(\"\");\n  const [seed, setSeed] = useState(0);\n  const [copied, setCopied] = useState(false);\n  var gen = require('random-seed');\n  const [wordSeed, setWordSeed] = useState(0);\n  const [tempSeed, submitSeed] = useState(0);\n  const [parsedSeed, setParsedSeed] = useState(-1);\n  const [chars, setChars] = useState({});\n  const [charPressed, setCharPressed] = useState(\"\");\n  const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n  const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];\n  const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];\n  var urlData = window.location.href;\n  const navigate = useNavigate();\n  useEffect(() => {\n    var urlSplit = urlData.split(\"wordle/\");\n\n    // if (!isNaN(parseInt(useParams().id))) {\n    //     var seedData = parseInt(useParams().id)\n    //     setParsedSeed(seedData)\n    // }\n\n    if (urlSplit.length > 1) {\n      var seedData = parseInt(urlSplit[1]);\n      setParsedSeed(seedData);\n    }\n    if (document.cookie.split(\";\").some(item => item.trim().startsWith(\"k2wsr=\"))) {\n      var cookieData = document.cookie.split('; ').find(row => row.startsWith('k2wsr=')).split('=')[1].split(',');\n      setWinCount(parseInt(cookieData[0]));\n      setWinStreak(parseInt(cookieData[1]));\n    } else {\n      document.cookie = \"k2wsr=0,0\";\n    }\n    fetch(words1).then(r => r.text()).then(text => {\n      setWordBank(text.split('\\n'));\n    });\n    fetch(words2).then(r => r.text()).then(text => {\n      setGuessBank(text.split('\\n'));\n    });\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    function handleUrlChange() {\n      softReset();\n      urlData = window.location.href;\n      var urlSplit = urlData.split(\"wordle/\");\n      if (urlSplit.length > 1) {\n        setSeed(parseInt(urlSplit[1]));\n      }\n    }\n    window.addEventListener('hashchange', handleUrlChange, false);\n\n    // use these to handle keypress without input field\n\n    const onKeyDown = ({\n      key\n    }) => {\n      setCharPressed(key);\n    };\n    const onKeyUp = ({\n      key\n    }) => {\n      // no real use for this yet\n    };\n    document.addEventListener('keydown', onKeyDown);\n    document.addEventListener('keyup', onKeyUp);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      document.removeEventListener('keydown', onKeyDown);\n      document.removeEventListener('keyup', onKeyUp);\n    };\n  }, []);\n  useEffect(() => {\n    /* \n        since onKeyDown and onKeyUp cannot seem to see the variable but are still\n        able to use the hook, handle hook function here\n         resets the charPressed to a blank char since useeffect doesn't execute if\n        no change is detected\n    */\n    if (charPressed != \"\") {\n      // console.log(charPressed)\n\n      toggleIssue(false);\n      if (!started) {\n        toggleStarted(true);\n      }\n      if (win || guessCount >= 6) {\n        resetGame();\n      }\n      if (currentGuess.length < 5 && charPressed != \"Enter\" && charPressed != \"Backspace\") {\n        setGuess(currentGuess + charPressed);\n      }\n      if (charPressed == \"Enter\") {\n        submitGuess(currentGuess.toLowerCase());\n      }\n      if (charPressed == \"Backspace\") {\n        setGuess(currentGuess.substr(0, currentGuess.length - 1));\n      }\n    }\n    setCharPressed(\"\");\n  }, [charPressed]);\n  useEffect(() => {\n    var temp = 0;\n    if (parsedSeed > -1) {\n      temp = parsedSeed;\n      setParsedSeed(-1);\n    } else {\n      temp = Math.floor(Math.random() * 10000);\n    }\n    // var temp = Math.floor(Math.random() * 10000)\n\n    setSeed(temp);\n  }, [wordBank]);\n  useEffect(() => {\n    var randGen = gen(seed);\n    setWordSeed(randGen.range(wordBank.length));\n  }, [seed]);\n  useEffect(() => {\n    generateWord();\n  }, [wordSeed]);\n  useEffect(() => {\n    if (winCount != 0) {\n      document.cookie = `k2wsr=${winCount},${winStreak}`;\n    }\n  }, [winCount, winStreak]);\n  useEffect(() => {\n    if (started) {\n      var st = Date.now();\n      setStartTime(st);\n    } else {\n      var et = Date.now();\n      setStartTime(et);\n    }\n  }, [started]);\n  useEffect(() => {\n    if (endTime > startTime && win) {\n      // console.log(endTime - startTime)\n      setTotalTime(endTime - startTime);\n    }\n  }, [endTime]);\n  const charCount = word => {\n    var ret = {};\n    for (var i in word) {\n      if (word[i] in ret) {\n        ret[word[i]] += 1;\n      } else {\n        ret[word[i]] = 1;\n      }\n    }\n    return ret;\n  };\n  const generateWord = () => {\n    var rand = wordSeed;\n    var word = wordBank[wordSeed];\n    //var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n    setChars(charCount(word));\n    setWord(word);\n  };\n  const softReset = () => {\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n    toggleShowWord(false);\n    setCopied(false);\n  };\n  const resetGame = () => {\n    navigate('/wordle');\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n    toggleShowWord(false);\n    setCopied(false);\n    if (seed.toString().length > 4) {\n      setSeed(seed + 1);\n    } else {\n      setSeed(Math.floor(Math.random() * 10000));\n    }\n    // setSeed(Math.floor(Math.random() * 10000))\n  };\n  const submitGuess = guess => {\n    if (!guess || guess.length != 5) {\n      setIssue(\"Guess must be 5 letters\");\n      toggleIssue(true);\n      // console.log(\"Guess must be 5 letters\")\n    } else if (guessBank.indexOf(guess) < 0) {\n      setIssue(\"Not a valid word\");\n      toggleIssue(true);\n      // console.log(\"Not a word\")\n    } else {\n      setCount(guessCount + 1);\n      var ret = [];\n      var didWin = true;\n      var greenLet = {};\n      var yellowLet = {};\n\n      // Pre-process (handles duplicates to the right)\n      for (var i in guess) {\n        var val = -1;\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n          // store that this letter is correct and should not have its color modified\n          if (guess[i] in greenLet) {\n            greenLet[guess[i]] += 1;\n          } else {\n            greenLet[guess[i]] = 1;\n          }\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          // color (val) should be modified if color already exists and multiple does not exist\n\n          val = 0;\n\n          // threshold checks\n\n          // green + yellow\n          if (guess[i] in greenLet && guess[i] in yellowLet) {\n            if (greenLet[guess[i]] + yellowLet[guess[i]] + 1 > chars[guess[i]]) {\n              val = -1;\n            }\n          }\n\n          // just green (no other yellows)\n          if (guess[i] in greenLet) {\n            if (greenLet[guess[i]] + 1 > chars[guess[i]]) {\n              val = -1;\n            }\n          }\n\n          // just yellow (no other greens)\n          if (guess[i] in yellowLet) {\n            if (yellowLet[guess[i]] + 1 > chars[guess[i]]) {\n              val = -1;\n            }\n          }\n\n          // if not modified, it is a valid yellow\n          if (val == 0) {\n            if (guess[i] in yellowLet) {\n              yellowLet[guess[i]] += 1;\n            } else {\n              yellowLet[guess[i]] = 1;\n            }\n          }\n        }\n        if (val != 1) {\n          didWin = false;\n        }\n        if (val == 1) {\n          var tempRight = rightLetters;\n          tempRight.push(guess[i]);\n          setRight(tempRight);\n        }\n        if (val == 0) {\n          var tempMissed = missedLetters;\n          tempMissed.push(guess[i]);\n          setMissed(tempMissed);\n        }\n        if (val == -1) {\n          var tempWrong = wrongLetters;\n          tempWrong.push(guess[i]);\n          setWrong(tempWrong);\n        }\n        ret.push([guess[i], val]);\n      }\n\n      // tempChars is meant to be used like a yellowLet\n      var tempChars = {};\n\n      // Post process\n      // go back to each yellow and see if it needs to be changed\n      // test on seed 3896 epees (correct previous), penne (control), tepee (l to r)\n\n      for (var i in ret) {\n        // check only yellow chars\n        if (ret[i][1] == 0) {\n          // track current char count for each character\n          if (ret[i][0] in tempChars) {\n            tempChars[ret[i][0]] += 1;\n          } else {\n            tempChars[ret[i][0]] = 1;\n          }\n          if (ret[i][0] in greenLet) {\n            // check against green let and see if it breaks threshold\n\n            if (tempChars[ret[i][0]] + greenLet[ret[i][0]] > chars[ret[i][0]]) {\n              ret[i][1] = -1;\n            }\n            // yellow threshold is handled in the pre process of ret\n            // since the first valid yellow is allowed and handled accordingly, we don't need to handle it again\n          }\n        }\n      }\n      setWin(didWin);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n      setGuess(\"\");\n      if (didWin) {\n        setWinCount(winCount + 1);\n        setWinStreak(winStreak + 1);\n        toggleStarted(false);\n        setEndTime(Date.now());\n\n        // resetGame()\n      }\n      if (!didWin && guessCount >= 5) {\n        setWinStreak(0);\n        toggleShowWord(true);\n        toggleStarted(false);\n        setEndTime(Date.now());\n\n        // resetGame()\n      }\n    }\n    return ret;\n  };\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return [];\n    }\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        marginBottom: \"4.5px\"\n      },\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }, this));\n\n    // for (var i = 0; i < 6 - guesses.length; i++) {\n    //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n    // }\n    return guesses;\n  };\n  const renderGuess = i => {\n    const c = i.map(c => c[1] == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 17\n    }, this) : c[1] == 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 21\n    }, this) : c[1] == -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 26\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexbox\",\n      children: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 13\n    }, this);\n  };\n  const renderCurrent = () => {\n    if (currentGuess == \"\") {\n      // have this be a bar with character height\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }, this);\n    }\n    const r = currentGuess.split('').map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 13\n    }, this));\n    var filler = 5 - r.length;\n    for (var i = 0; i < filler; i++) {\n      r.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        style: {\n          display: \"inline-block\",\n          padding: \"1px\",\n          margin: \"1px\",\n          fontWeight: \"bold\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 17\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: r\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 13\n    }, this);\n  };\n  const renderKeyBoard = () => {\n    const t = kbTop.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        toggleIssue(false);\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 25\n    }, this));\n    const m = kbMid.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 25\n    }, this));\n    const b = kbBot.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n        if (!started) {\n          toggleStarted(true);\n        }\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 807,\n      columnNumber: 25\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: m\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            width: \"auto\"\n          },\n          onClick: () => {\n            toggleIssue(false);\n            if (guessCount <= 5 && win == false) {\n              // submitGuess(currentGuess.toLowerCase())\n              setGuess(\"\");\n            } else {\n              resetGame();\n            }\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 21\n        }, this), b, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            width: \"auto\"\n          },\n          onClick: () => {\n            toggleIssue(false);\n            setGuess(currentGuess.substr(0, currentGuess.length - 1));\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 13\n    }, this);\n  };\n  const renderWorkspace = () => {\n    var guessesTaken = renderGuesses().length;\n    var rowsLeft = 5 - guessesTaken;\n    var rows = [];\n    for (var i = 0; i < rowsLeft; i++) {\n      rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 17\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderGuesses()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 17\n      }, this), guessCount < 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderCurrent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 908,\n      columnNumber: 13\n    }, this);\n  };\n  const copyGrid = () => {\n    var tempText = \"\";\n    for (var i in guessHistory) {\n      for (var j in guessHistory[i]) {\n        if (guessHistory[i][j][1] == 0) {\n          tempText += \"🟨\";\n        }\n        if (guessHistory[i][j][1] == 1) {\n          tempText += \"🟩\";\n        }\n        if (guessHistory[i][j][1] == -1) {\n          tempText += \"⬛️\";\n        }\n      }\n      tempText += '\\n';\n    }\n    return tempText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"testLanding\",\n    style: {\n      height: \"auto\"\n    }\n    // be able to submit while not in text entry\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        maxWidth: \"750px\"\n      },\n      children: [devTools == 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          toggleHardReset(hardReset + 1);\n          if (hardReset == 2) {\n            document.cookie = \"k2wsr=0,0\";\n            setWinCount(parseInt(0));\n            setWinStreak(parseInt(0));\n            toggleHardReset(0);\n          }\n        },\n        style: {\n          position: \"absolute\",\n          backgroundColor: \"red\",\n          top: \"0px\",\n          right: \"0px\"\n        },\n        children: [\"w: \", windowDimensions.width, \", h: \", windowDimensions.height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 21\n      }, this) : null, devTools == 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"0px\",\n          left: \"0px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            if (!isNaN(e.target.value)) {\n              submitSeed(parseInt(e.target.value));\n            } else {\n              // console.log(\"invalid\")\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setSeed(tempSeed);\n            toggleDev(0);\n            submitSeed(0);\n          },\n          children: \"Set Seed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 21\n      }, this) : null, windowDimensions.width > 800 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            width: \"60%\",\n            marginLeft: \"20%\",\n            fontWeight: 'bold',\n            fontSize: \"48px\"\n          },\n          children: \"Wordle Sim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            fontSize: \"24px\",\n            width: \"20%\",\n            textAlign: \"left\",\n            justifyContent: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Wins: \", winCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1017,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Winstreak: \", winStreak]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1020,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            width: \"48%\",\n            marginLeft: \"26%\",\n            fontWeight: 'bold',\n            fontSize: \"30px\"\n          },\n          children: \"Wordle Sim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            fontSize: \"15px\",\n            width: \"26%\",\n            textAlign: \"left\",\n            justifyContent: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Wins: \", winCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1032,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Winstreak: \", winStreak]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1035,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderWorkspace()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 17\n      }, this), win && seed.toString().length < 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [totalTime / 1000, \"s, Seed: \", seed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"links\",\n          onClick: () => {\n            // navigator.clipboard.writeText(`Solved this wordle-like game in ${(totalTime)/1000} seconds. See if you can do better\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n            navigator.clipboard.writeText(`Guesses: ${guessHistory.length}/6\\nTime: ${(totalTime / 1000).toFixed(2)} s\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`);\n            setCopied(true);\n          },\n          children: copied ? \"Copied\" : \"Copy to Clipboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 21\n      }, this) : (showWord || devTools == 3) && seed.toString().length < 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Word: \", currentWord, \" Seed: \", seed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"links\",\n          onClick: () => {\n            // navigator.clipboard.writeText(`This word is a tough one. See if you can solve it\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n            navigator.clipboard.writeText(`Guesses: X/6\\nTime: N/A\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`);\n            setCopied(true);\n          },\n          children: copied ? \"Copied\" : \"Copy to Clipboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 25\n      }, this) : showIssue && seed.toString().length < 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: issue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 29\n      }, this) : null, win && seed.toString().length >= 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [totalTime / 1000, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 21\n      }, this) : (showWord || devTools == 3) && seed.toString().length >= 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 25\n      }, this) : showIssue && seed.toString().length >= 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: issue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 29\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: win ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            resetGame();\n          },\n          className: \"wordleButton\",\n          style: {\n            padding: \"11px\",\n            width: \"100%\"\n          },\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1158,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"wordleButton\",\n            style: {\n              padding: \"11px\",\n              width: \"40%\",\n              marginRight: \"5%\"\n            },\n            onClick: () => {\n              if (guessCount <= 5 && win == false) {\n                submitGuess(currentGuess.toLowerCase());\n              } else {\n                resetGame();\n              }\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (guessCount == 0) {\n                if (devTools == 3) {\n                  toggleDev(0);\n                } else {\n                  toggleDev(devTools + 1);\n                }\n              } else {\n                toggleDev(0);\n              }\n              resetGame();\n              toggleStarted(false);\n              if (!win) {\n                setWinStreak(0);\n                if (guessCount <= 5) {\n                  setSeed(Math.floor(Math.random() * 10000));\n                }\n              }\n            },\n            className: \"wordleReset\",\n            style: {\n              padding: \"11px\",\n              width: \"40%\"\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderKeyBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          className: \"wordleButton\",\n          children: \"Return to the main page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 955,\n    columnNumber: 9\n  }, this);\n}\n_s(Wordle, \"ruYpOmYF9IsOhz8f3GSREzz6EPw=\", false, function () {\n  return [useNavigate];\n});\n_c = Wordle;\nexport default Wordle;\nvar _c;\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"names":["useEffect","useState","axios","rs","words1","words2","Navigate","useParams","useNavigate","jsxDEV","_jsxDEV","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","_s","devTools","toggleDev","hardReset","toggleHardReset","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","winCount","setWinCount","winStreak","setWinStreak","wordBank","setWordBank","guessBank","setGuessBank","showWord","toggleShowWord","showIssue","toggleIssue","started","toggleStarted","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","issue","setIssue","seed","setSeed","copied","setCopied","gen","require","wordSeed","setWordSeed","tempSeed","submitSeed","parsedSeed","setParsedSeed","chars","setChars","charPressed","setCharPressed","kbTop","kbMid","kbBot","urlData","location","href","navigate","urlSplit","split","length","seedData","parseInt","document","cookie","some","item","trim","startsWith","cookieData","find","row","fetch","then","r","text","handleResize","handleUrlChange","softReset","addEventListener","onKeyDown","key","onKeyUp","removeEventListener","resetGame","submitGuess","toLowerCase","substr","temp","Math","floor","random","randGen","range","generateWord","st","Date","now","et","charCount","word","ret","i","rand","toString","guess","indexOf","didWin","greenLet","yellowLet","val","tempRight","push","tempMissed","tempWrong","tempChars","tempHist","renderGuesses","guesses","map","g","style","marginBottom","children","renderGuess","fileName","_jsxFileName","lineNumber","columnNumber","c","className","backgroundColor","display","padding","margin","fontWeight","borderColor","toUpperCase","renderCurrent","filler","renderKeyBoard","t","k","onClick","m","b","renderWorkspace","guessesTaken","rowsLeft","rows","copyGrid","tempText","j","maxWidth","position","top","right","left","onChange","e","isNaN","target","value","marginLeft","fontSize","textAlign","justifyContent","navigator","clipboard","writeText","toFixed","marginRight","_c","$RefreshReg$"],"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport rs from \"random-seed\"\nimport words1 from \"./files/shuffled_real_wordles.txt\"\nimport words2 from \"./files/combined_wordlist.txt\"\nimport { Navigate, useParams } from \"react-router\";\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n\n    const [devTools, toggleDev] = useState(0);\n    const [hardReset, toggleHardReset] = useState(0);\n\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n    \n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const [winCount, setWinCount] = useState(0);\n    const [winStreak, setWinStreak] = useState(0);\n\n    const [wordBank, setWordBank] = useState([]);\n    const [guessBank, setGuessBank] = useState([]);\n\n    const [showWord, toggleShowWord] = useState(false);\n    const [showIssue, toggleIssue] = useState(false);\n\n    const [started, toggleStarted] = useState(false);\n    const [startTime, setStartTime] = useState(0);\n    const [endTime, setEndTime] = useState(0);\n    const [totalTime, setTotalTime] = useState(0);\n\n    const [issue, setIssue] = useState(\"\")\n\n    const [seed, setSeed] = useState(0)\n\n    const [copied, setCopied] = useState(false)\n\n    var gen = require('random-seed')\n\n    const [wordSeed, setWordSeed] = useState(0)\n    const [tempSeed, submitSeed] = useState(0)\n    const [parsedSeed, setParsedSeed] = useState(-1)\n\n    const [chars, setChars] = useState({})\n\n    const [charPressed, setCharPressed] = useState(\"\")\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'] \n\n    var urlData = window.location.href\n\n    const navigate = useNavigate()\n\n    \n\n    useEffect(() => {\n\n        var urlSplit = urlData.split(\"wordle/\")\n\n\n\n        // if (!isNaN(parseInt(useParams().id))) {\n        //     var seedData = parseInt(useParams().id)\n        //     setParsedSeed(seedData)\n        // }\n\n        if (urlSplit.length > 1){\n            var seedData = parseInt(urlSplit[1])\n            setParsedSeed(seedData)\n        }\n\n        if (document.cookie\n                .split(\";\")\n                .some(item => item.trim().startsWith(\"k2wsr=\"))) {\n                    var cookieData = document.cookie.split('; ').find(row => row.startsWith('k2wsr=')).split('=')[1].split(',')\n                    setWinCount(parseInt(cookieData[0]))\n                    setWinStreak(parseInt(cookieData[1]))\n        } else {\n            document.cookie= \"k2wsr=0,0\"\n        }\n        \n        fetch(words1)\n            .then(r => r.text())\n            .then(text => {\n                setWordBank(text.split('\\n'))\n            })\n\n        fetch(words2)\n            .then(r => r.text())\n            .then(text => {\n                setGuessBank(text.split('\\n'))\n            })\n        \n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n        function handleUrlChange() {\n            softReset()\n\n            urlData = window.location.href\n            var urlSplit = urlData.split(\"wordle/\")\n\n\n            if (urlSplit.length > 1) {\n                setSeed(parseInt(urlSplit[1]))\n            }\n\n        }\n        window.addEventListener(\n            'hashchange',\n            handleUrlChange,\n            false\n        );\n\n        // use these to handle keypress without input field\n\n        const onKeyDown = ({key}) => {\n\n            setCharPressed(key)\n\n\n        }\n\n        const onKeyUp = ({key}) => {\n            // no real use for this yet\n        }\n\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('keyup', onKeyUp);\n\n\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('keyup', onKeyUp);\n        }\n\n        \n    }, []);\n\n    useEffect(() => {\n        /* \n            since onKeyDown and onKeyUp cannot seem to see the variable but are still\n            able to use the hook, handle hook function here\n\n            resets the charPressed to a blank char since useeffect doesn't execute if\n            no change is detected\n        */\n        if (charPressed != \"\") {\n            // console.log(charPressed)\n\n            toggleIssue(false)\n            if (!started) {\n                toggleStarted(true)\n            }\n            if (win || guessCount >=6) {\n                resetGame()\n            }\n            if (currentGuess.length < 5 && charPressed != \"Enter\" && charPressed !=\"Backspace\") {\n                setGuess(currentGuess+charPressed)\n            }\n            if (charPressed == \"Enter\") {\n                submitGuess(currentGuess.toLowerCase())\n            }\n            if (charPressed == \"Backspace\") {\n                setGuess(currentGuess.substr(0,currentGuess.length -1 ))\n            }\n        }\n        setCharPressed(\"\")\n    }, [charPressed])\n\n\n    useEffect(() => {\n        var temp = 0\n\n        if (parsedSeed > -1) {\n            temp = parsedSeed\n            setParsedSeed(-1)\n        } else {\n            temp = Math.floor(Math.random() * 10000)\n        }\n        // var temp = Math.floor(Math.random() * 10000)\n        \n        setSeed(temp)\n\n    }, [wordBank])\n\n    useEffect(() => { \n        var randGen = gen(seed);\n        setWordSeed(randGen.range(wordBank.length))\n    }, [seed])\n\n    useEffect(() => {\n        generateWord()\n    }, [wordSeed])\n\n    useEffect(() => {\n        if (winCount != 0) {\n            document.cookie = `k2wsr=${winCount},${winStreak}`\n        }\n        \n    }, [winCount, winStreak]) \n\n    useEffect(() => {\n        if (started) {\n            var st = Date.now()\n            setStartTime(st)\n        } else {\n            var et = Date.now()\n            setStartTime(et)\n        }\n        \n    }, [started])\n\n    useEffect(() => {\n        if (endTime > startTime && win) {\n            // console.log(endTime - startTime)\n            setTotalTime(endTime-startTime)\n        }\n    }, [endTime])\n\n    const charCount = (word) => {\n        var ret = {}\n        for (var i in word) {\n            if (word[i] in ret) {\n                ret[word[i]] += 1\n            } else {\n                ret[word[i]] = 1\n            }\n        }\n        return ret\n    }\n\n    const generateWord = () => {\n        var rand = wordSeed\n        var word = wordBank[wordSeed]\n        //var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n        setChars(charCount(word))\n        setWord(word)\n    }\n\n    const softReset = () => {\n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n        setCopied(false)\n    }\n\n    const resetGame = () => {\n        \n        navigate('/wordle')\n        \n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n        setCopied(false)\n        if (seed.toString().length > 4) {\n            setSeed(seed + 1)\n        } else {\n            setSeed(Math.floor(Math.random() * 10000))\n        }\n        // setSeed(Math.floor(Math.random() * 10000))\n    }\n\n    \n\n    const submitGuess = (guess) => {\n        if (!guess || guess.length != 5) {\n            setIssue(\"Guess must be 5 letters\")\n            toggleIssue(true)\n            // console.log(\"Guess must be 5 letters\")\n        } else if (guessBank.indexOf(guess) < 0){\n            setIssue(\"Not a valid word\")\n            toggleIssue(true)\n            // console.log(\"Not a word\")\n        } else {\n            setCount(guessCount + 1)\n            var ret = []\n            var didWin = true;\n\n            var greenLet = {}\n            var yellowLet = {}\n\n            // Pre-process (handles duplicates to the right)\n            for (var i in guess) {\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                    // store that this letter is correct and should not have its color modified\n                    if (guess[i] in greenLet) {\n                        greenLet[guess[i]] += 1\n                    } else {\n                        greenLet[guess[i]] = 1\n                    }\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    // color (val) should be modified if color already exists and multiple does not exist\n                    \n                    val = 0\n\n                    // threshold checks\n\n                    // green + yellow\n                    if (guess[i] in greenLet && guess[i] in yellowLet) {\n                        if (greenLet[guess[i]] + yellowLet[guess[i]] + 1 > chars[guess[i]]) {\n                            val = -1\n\n                        }\n                    }\n\n                    // just green (no other yellows)\n                    if (guess[i] in greenLet) {\n\n                        if (greenLet[guess[i]] + 1 > chars[guess[i]]) {\n                            val = -1\n\n                        }\n                    }\n\n                    // just yellow (no other greens)\n                    if (guess[i] in yellowLet) {\n                        if (yellowLet[guess[i]] + 1 > chars[guess[i]]) {\n                            val = -1\n\n                        }\n                    }\n\n                    // if not modified, it is a valid yellow\n                    if (val == 0) {\n                        if (guess[i] in yellowLet) {\n                            yellowLet[guess[i]] += 1\n                        } else {\n                            yellowLet[guess[i]] = 1\n                        }\n                    }\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            \n\n\n            \n            // tempChars is meant to be used like a yellowLet\n            var tempChars = {}\n\n            // Post process\n            // go back to each yellow and see if it needs to be changed\n            // test on seed 3896 epees (correct previous), penne (control), tepee (l to r)\n\n            for (var i in ret) {\n                // check only yellow chars\n                if (ret[i][1] == 0) {\n                    // track current char count for each character\n                    if (ret[i][0] in tempChars) {\n                        tempChars[ret[i][0]] += 1\n                    } else {\n                        tempChars[ret[i][0]] = 1\n                    }\n\n\n                    if (ret[i][0] in greenLet){\n                        // check against green let and see if it breaks threshold\n\n                        if (tempChars[ret[i][0]] + greenLet[ret[i][0]] > chars[ret[i][0]]) {\n                            ret[i][1] = -1 \n                        }\n                        // yellow threshold is handled in the pre process of ret\n                        // since the first valid yellow is allowed and handled accordingly, we don't need to handle it again\n\n                    } \n                }\n            }\n\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n            setGuess(\"\")\n            if (didWin) {\n                setWinCount(winCount + 1)\n                setWinStreak(winStreak + 1)\n                toggleStarted(false)\n                setEndTime(Date.now())\n                \n                // resetGame()\n            }\n            if (!didWin && guessCount >= 5) {\n                setWinStreak(0)\n                toggleShowWord(true)\n                toggleStarted(false)\n                setEndTime(Date.now())\n                \n                // resetGame()\n            }\n            \n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return []\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div style={{width: \"100%\", marginBottom: \"4.5px\"}}>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        // for (var i = 0; i < 6 - guesses.length; i++) {\n        //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n        // }\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"square\" style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}>\n                    <div className=\"content\">\n                        {c[0].toUpperCase()}\n                    </div>    \n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"square\"  style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"square\"  style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            <div className=\"content\">\n                                {c[0].toUpperCase()}\n                            </div>\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return (\n            <div className=\"flexbox\">\n                {c}\n            </div>\n        )\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == \"\") {\n            // have this be a bar with character height\n            return (\n                <div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                </div>\n            )\n        }\n\n        const r = currentGuess.split('').map((c) => (\n            <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>    \n                    </div>\n\n        ))\n\n        var filler = 5 - r.length\n\n        for (var i = 0; i < filler; i++) {\n            r.push(\n                <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                    <div className=\"content\">\n                        \n                    </div>    \n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {r}\n            </div>\n        )\n    }\n\n    const renderKeyBoard = () => {\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div className=\"flexbox\">{t}</div>\n                <div className=\"flexbox\">{m}</div>\n                {/* add the backspace and enter keys in bottom row */}\n                <div className=\"flexbox\">\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (guessCount <= 5 && win == false) {\n                                // submitGuess(currentGuess.toLowerCase())\n                                setGuess(\"\")\n                                \n                            } else {\n                                resetGame()\n                            }\n                        }}  \n                    >\n                        Clear\n                    </div>\n                    {b}\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            setGuess(currentGuess.substr(0,currentGuess.length -1 ))\n                        }}  \n                    >\n                        Delete\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const renderWorkspace = () => {\n        var guessesTaken = renderGuesses().length\n        var rowsLeft = 5 - guessesTaken\n\n        var rows = []\n\n        for (var i = 0; i < rowsLeft; i++) {\n            rows.push(\n                <div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <div>\n                    {renderGuesses()}\n                </div>\n                {/* <div style={{display: \"block\", width: \"100%\", height: \"3px\"}}/> */}\n                {(guessCount < 6) ? (\n                    <div>\n                        {renderCurrent()}\n                    </div>\n                ) : (\n                    null\n                )}\n                \n                <div>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    const copyGrid = () => {\n        var tempText = \"\"\n\n        for (var i in guessHistory) {\n\n            for (var j in guessHistory[i]) {\n\n                if (guessHistory[i][j][1] == 0) {\n                    tempText += \"🟨\"\n                }\n                if (guessHistory[i][j][1] == 1) {\n                    tempText += \"🟩\"\n                }\n                if (guessHistory[i][j][1] == -1) {\n                    tempText += \"⬛️\"\n                }\n            }\n\n            tempText += '\\n'\n        }\n\n        return tempText\n    }\n\n\n\n    return (\n        <div className=\"testLanding\" style={{height: \"auto\"}}\n            // be able to submit while not in text entry\n\n\n        >\n            <div style={{width: \"100%\", maxWidth: \"750px\"}}>\n                {(devTools == 3) ? (\n                    <div  \n                        onClick={() => {\n                            toggleHardReset(hardReset + 1)\n                            if (hardReset == 2) {\n                                document.cookie= \"k2wsr=0,0\"\n                                setWinCount(parseInt(0))\n                                setWinStreak(parseInt(0))\n                                toggleHardReset(0)\n                            }\n                        }} \n                        style={{position: \"absolute\", backgroundColor: \"red\", top: \"0px\", right: \"0px\"}}\n                    >\n                        w: {windowDimensions.width}, h: {windowDimensions.height}\n                    </div>\n                    \n                ) : (\n                    null\n                )}\n\n                {(devTools == 3) ? (\n                    <div style={{position: \"absolute\", top: \"0px\", left: \"0px\"}}>\n                    <input\n                        \n                        onChange={(e) => {\n                            if (!isNaN(e.target.value)) {\n                                submitSeed(parseInt(e.target.value))\n                            } else {\n                                // console.log(\"invalid\")\n                            }\n                        }}\n                    />\n                    <button\n                        onClick={() => {\n                            setSeed(tempSeed)\n                            toggleDev(0)\n                            submitSeed(0)\n                        }}\n                    >Set Seed</button>\n                    {/* <button\n                        onClick={() => {\n\n                        }}\n                    >Test</button> */}\n                    </div>\n                ) : (\n                    null\n                )}\n\n                {(windowDimensions.width > 800) ? (\n                    <div style={{width: '100%'}}>\n                        <div style={{display: \"inline-block\", width: \"60%\", marginLeft: \"20%\", fontWeight: 'bold', fontSize: \"48px\"}}>\n                            Wordle Sim\n                        </div>\n                        \n                        <div style={{display: \"inline-block\", fontSize: \"24px\", width: \"20%\", textAlign: \"left\", justifyContent:'left'}}>\n                            <div>\n                                Wins: {winCount}\n                            </div>\n                            <div>\n                                Winstreak: {winStreak}\n                            </div>\n                        </div>\n                    </div>  \n                ) : (\n                    <div style={{width: '100%'}}>\n                        <div style={{display: \"inline-block\", width: \"48%\", marginLeft: \"26%\", fontWeight: 'bold', fontSize: \"30px\"}}>\n                            Wordle Sim\n                        </div>\n                        \n                        <div style={{display: \"inline-block\", fontSize: \"15px\", width: \"26%\", textAlign: \"left\", justifyContent:'left'}}>\n                            <div>\n                                Wins: {winCount}\n                            </div>\n                            <div>\n                                Winstreak: {winStreak}\n                            </div>\n                        </div>\n                    </div> \n                )}\n\n                \n\n                {/* Wordle sim\n                <br/> */}\n\n                \n                \n\n                <br/>\n\n                <div>\n                    {renderWorkspace()}\n                </div>\n                \n                {(win && seed.toString().length < 5) ? (\n                    <div>\n                        <div>\n                            {(totalTime)/1000}s, Seed: {seed}\n                        </div>\n                        <div className=\"links\" onClick={() => {\n                                    // navigator.clipboard.writeText(`Solved this wordle-like game in ${(totalTime)/1000} seconds. See if you can do better\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                    navigator.clipboard.writeText(`Guesses: ${guessHistory.length}/6\\nTime: ${((totalTime)/1000).toFixed(2)} s\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                    setCopied(true)\n                                }   \n                            }>\n                            {(copied) ? (\n                                \"Copied\"\n                            ) : (\n                                \"Copy to Clipboard\"\n                            )}\n                            \n                        </div>\n                    </div>\n                ) : (\n                    ((showWord || devTools == 3) && seed.toString().length < 5) ? (\n                        <div>\n                            <div>\n                                Word: {currentWord} Seed: {seed}\n                            </div>\n                            <div className=\"links\" onClick={() => {\n                                        // navigator.clipboard.writeText(`This word is a tough one. See if you can solve it\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                        navigator.clipboard.writeText(`Guesses: X/6\\nTime: N/A\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                        setCopied(true)\n                                    }\n                                }>\n                                {(copied) ? (\n                                    \"Copied\"\n                                ) : (\n                                    \"Copy to Clipboard\"\n                                )}\n                            </div>\n                        </div>\n                    ) : (\n                        (showIssue && seed.toString().length < 5) ? (\n                            <div>{issue}</div>\n                        ) : (\n                            null\n                            )\n                        )\n                )}\n\n                {(win && seed.toString().length >= 5) ? (\n                    <div>\n                        {(totalTime)/1000}s\n                    </div>\n                ) : (\n                    ((showWord || devTools == 3) && seed.toString().length >= 5) ? (\n                        <div>{currentWord}</div>\n                    ) : (\n                        (showIssue && seed.toString().length >= 5) ? (\n                            <div>{issue}</div>\n                        ) : (\n                            null\n                            )\n                        )\n                )}\n\n                <br/>\n                <div className=\"flexbox\">\n\n                \n                {\n                // old input box, might still need it\n\n                /* <input\n                    className=\"ctButton\"\n                    style={{marginLeft: \"5%\", marginRight: \"5%\",marginTop:\"0\", float: \"left\", border: \"none\", backgroundColor: \"white\", color: \"black\", padding: \"12px\", width: \"30%\", justifyContent: \"center\"}}\n                    \n                    value={currentGuess}\n                    onChange={(e)=>{\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n\n                        var temp = e.target.value.substr(0,5)\n\n\n                        setGuess(temp)\n\n                    }}\n                    // attempting to have keyboard functionality without text input box\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            submitGuess(currentGuess.toLowerCase())\n                        }\n                    }}\n                /> */}\n            \n                {(win) ? (\n                    <button \n                        onClick={() => {\n                            resetGame()\n                        }}\n                        className=\"wordleButton\"\n                        style={{padding: \"11px\", width: \"100%\"}}\n                    >\n                        Continue\n                    </button>\n                ) : (\n                    <div style={{display: \"inline\", width: \"100%\"}}>\n                        <button \n                            className=\"wordleButton\"\n                            style={{padding: \"11px\", width: \"40%\", marginRight: \"5%\"}}\n                            onClick={() => {\n                                if (guessCount <= 5 && win == false) {\n                                    submitGuess(currentGuess.toLowerCase())\n                                    \n                                } else {\n                                    resetGame()\n                                }\n                            \n                        }}>\n                            Submit\n                        </button>\n                        <button \n                            onClick={() => {\n                                if (guessCount == 0){\n                                    if (devTools == 3) {\n                                        toggleDev(0)\n                                    } else {\n                                        toggleDev(devTools + 1)\n                                    }\n                                } else {\n                                    toggleDev(0)\n                                }\n                                resetGame()\n                                toggleStarted(false)\n                                if (!win) {\n                                    setWinStreak(0)\n                                    if (guessCount <= 5) {\n                                        setSeed(Math.floor(Math.random() * 10000))\n                                    }\n                                }\n\n                                \n                            }}\n                            className=\"wordleReset\"\n                            style={{padding: \"11px\", width: \"40%\"}}\n                        >\n                            Reset\n                        </button>\n                    </div>\n                )}\n                \n                </div>\n\n                <br/>\n                <div>\n                    {renderKeyBoard()}\n                </div>\n                <br/>\n                <div>\n                    <a href='/' className=\"wordleButton\">Return to the main page</a>\n                </div>\n\n                <br/>\n            </div>\n        </div>\n    )\n}\n\nexport default Wordle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}