{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport words1 from \"./files/shuffled_real_wordles.txt\";\nimport words2 from \"./files/combined_wordlist.txt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction Wordle() {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  const [win, setWin] = useState(false);\n  const [rightLetters, setRight] = useState([]);\n  const [missedLetters, setMissed] = useState([]);\n  const [wrongLetters, setWrong] = useState([]);\n  const [winCount, setWinCount] = useState(0);\n  const [winStreak, setWinStreak] = useState(0);\n  const [wordBank, setWordBank] = useState([]);\n  const [guessBank, setGuessBank] = useState([]);\n  const [showWord, toggleShowWord] = useState(false);\n  const [showIssue, toggleIssue] = useState(false);\n  const [issue, setIssue] = useState(\"\");\n  const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n  const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];\n  const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];\n  var wordList = [\"tower\", \"water\", \"actor\", \"agent\"];\n  useEffect(() => {\n    fetch(words1).then(r => r.text()).then(text => {\n      setWordBank(text.split('\\n'));\n    });\n    fetch(words2).then(r => r.text()).then(text => {\n      setGuessBank(text.split('\\n'));\n    });\n\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  useEffect(() => {\n    generateWord();\n  }, [wordBank]);\n\n  const generateWord = () => {\n    // for now get word from wordlist\n    var rand = Math.floor(Math.random() * wordBank.length); // console.log(rand)\n\n    var word = wordBank[Math.floor(Math.random() * wordBank.length)]; // console.log(word)\n\n    setWord(word);\n  };\n\n  const resetGame = () => {\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n    toggleShowWord(false);\n  };\n\n  const submitGuess = guess => {\n    if (!guess || guess.length != 5) {\n      setIssue(\"Guess must be 5 letters\");\n      toggleIssue(true);\n      console.log(\"Guess must be 5 letters\");\n    } else if (guessBank.indexOf(guess) < 0) {\n      setIssue(\"Not a valid word\");\n      toggleIssue(true);\n      console.log(\"Not a word\");\n    } else {\n      setCount(guessCount + 1);\n      var ret = [];\n      var didWin = true;\n\n      for (var i in guess) {\n        var val = -1;\n\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          val = 0;\n        }\n\n        if (val != 1) {\n          didWin = false;\n        }\n\n        if (val == 1) {\n          var tempRight = rightLetters;\n          tempRight.push(guess[i]);\n          setRight(tempRight);\n        }\n\n        if (val == 0) {\n          var tempMissed = missedLetters;\n          tempMissed.push(guess[i]);\n          setMissed(tempMissed);\n        }\n\n        if (val == -1) {\n          var tempWrong = wrongLetters;\n          tempWrong.push(guess[i]);\n          setWrong(tempWrong);\n        }\n\n        ret.push([guess[i], val]);\n      }\n\n      setWin(didWin);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n      setGuess(\"\");\n\n      if (didWin) {\n        setWinCount(winCount + 1);\n        setWinStreak(winStreak + 1); // resetGame()\n      }\n\n      if (!didWin && guessCount >= 5) {\n        setWinStreak(0);\n        toggleShowWord(true); // resetGame()\n      }\n    }\n\n    return ret;\n  };\n\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return [];\n    }\n\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"40px\",\n        width: \"100%\",\n        marginBottom: \"2px\"\n      },\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)); // for (var i = 0; i < 6 - guesses.length; i++) {\n    //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n    // }\n\n    return guesses;\n  };\n\n  const renderGuess = i => {\n    const c = i.map(c => c[1] == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }, this) : c[1] == 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }, this) : c[1] == -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 26\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCurrent = () => {\n    if (currentGuess == \"\") {\n      // have this be a bar with character height\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this);\n    }\n\n    const r = currentGuess.split('').map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        display: \"inline-block\",\n        margin: \"1px\",\n        padding: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this));\n    var filler = 5 - r.length;\n\n    for (var i = 0; i < filler; i++) {\n      r.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordleLetter\",\n        style: {\n          display: \"inline-block\",\n          margin: \"1px\",\n          padding: \"1px\"\n        },\n        children: \"_\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 20\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"block\"\n      },\n      children: r\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderKeyBoard = () => {\n    const t = kbTop.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 25\n    }, this));\n    const m = kbMid.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 25\n    }, this));\n    const b = kbBot.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 25\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: m\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\"\n          },\n          onClick: () => {},\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 21\n        }, this), b]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderWorkspace = () => {\n    var guessesTaken = renderGuesses().length;\n    var rowsLeft = 5 - guessesTaken;\n    var rows = [];\n\n    for (var i = 0; i < rowsLeft; i++) {\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderGuesses()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"block\",\n          width: \"100%\",\n          height: \"1px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 17\n      }, this), guessCount < 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderCurrent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"testLanding\",\n    children: [\"Wordle sim\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Wins: \", winCount, \", Winstreak: \", winStreak]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderWorkspace()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }, this), showWord ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 17\n    }, this) : null, showIssue ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: issue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"ctButton\",\n        style: {\n          margin: \"none\",\n          marginTop: \"0\",\n          float: \"left\",\n          border: \"none\",\n          backgroundColor: \"white\",\n          color: \"black\",\n          padding: \"12px\"\n        },\n        value: currentGuess,\n        onChange: e => {\n          toggleIssue(false);\n\n          if (win || guessCount >= 6) {\n            resetGame();\n          }\n\n          var temp = e.target.value.substr(0, 5);\n          setGuess(temp);\n        },\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            if (win || guessCount >= 6) {\n              resetGame();\n            }\n\n            submitGuess(currentGuess.toLowerCase());\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"wordleButton\",\n        style: {\n          marginLeft: \"15px\",\n          padding: \"11px\"\n        },\n        onClick: () => {\n          if (guessCount <= 6 && win == false) {\n            submitGuess(currentGuess.toLowerCase());\n          }\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          resetGame();\n\n          if (!win) {\n            setWinStreak(0);\n            setWinCount(0);\n          }\n        },\n        className: \"wordleReset\",\n        style: {\n          marginLeft: \"15px\",\n          padding: \"11px\"\n        },\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderKeyBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"wordleButton\",\n        children: \"Return to the main page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Wordle, \"zufER5Ne5lmhkHZcDZ7tbif4cSE=\");\n\n_c = Wordle;\nexport default Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"names":["useEffect","useState","axios","words1","words2","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","winCount","setWinCount","winStreak","setWinStreak","wordBank","setWordBank","guessBank","setGuessBank","showWord","toggleShowWord","showIssue","toggleIssue","issue","setIssue","kbTop","kbMid","kbBot","wordList","fetch","then","r","text","split","handleResize","addEventListener","removeEventListener","generateWord","rand","Math","floor","random","length","word","resetGame","submitGuess","guess","console","log","indexOf","ret","didWin","i","val","tempRight","push","tempMissed","tempWrong","tempHist","renderGuesses","guesses","map","g","marginBottom","renderGuess","c","backgroundColor","display","padding","margin","fontWeight","borderColor","toUpperCase","renderCurrent","filler","renderKeyBoard","t","k","m","b","renderWorkspace","guessesTaken","rowsLeft","rows","marginTop","float","border","color","e","temp","target","value","substr","key","toLowerCase","marginLeft"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport words1 from \"./files/shuffled_real_wordles.txt\"\nimport words2 from \"./files/combined_wordlist.txt\"\n\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n    \n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const [winCount, setWinCount] = useState(0);\n    const [winStreak, setWinStreak] = useState(0);\n\n    const [wordBank, setWordBank] = useState([]);\n    const [guessBank, setGuessBank] = useState([]);\n\n    const [showWord, toggleShowWord] = useState(false);\n    const [showIssue, toggleIssue] = useState(false);\n\n    const [issue, setIssue] = useState(\"\")\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n\n    var wordList = [\"tower\", \"water\", \"actor\", \"agent\"]\n\n    useEffect(() => {\n        \n        fetch(words1)\n            .then(r => r.text())\n            .then(text => {\n                setWordBank(text.split('\\n'))\n            })\n\n        fetch(words2)\n            .then(r => r.text())\n            .then(text => {\n                setGuessBank(text.split('\\n'))\n            })\n        \n\n        \n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    useEffect(() => {\n        generateWord()\n    }, [wordBank])\n\n    const generateWord = () => {\n        // for now get word from wordlist\n        var rand = Math.floor(Math.random() * wordBank.length)\n        // console.log(rand)\n        var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n        // console.log(word)\n        setWord(word)\n    }\n\n    const resetGame = () => {\n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n    }\n\n    const submitGuess = (guess) => {\n        if (!guess || guess.length != 5) {\n            setIssue(\"Guess must be 5 letters\")\n            toggleIssue(true)\n            console.log(\"Guess must be 5 letters\")\n        } else if (guessBank.indexOf(guess) < 0){\n            setIssue(\"Not a valid word\")\n            toggleIssue(true)\n            console.log(\"Not a word\")\n        } else {\n            setCount(guessCount + 1)\n            var ret = []\n            var didWin = true;\n\n            for (var i in guess) {\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    val = 0\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            \n\n            \n\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n            setGuess(\"\")\n            if (didWin) {\n                setWinCount(winCount + 1)\n                setWinStreak(winStreak + 1)\n                // resetGame()\n            }\n            if (!didWin && guessCount >= 5) {\n                setWinStreak(0)\n                toggleShowWord(true)\n                // resetGame()\n            }\n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return []\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div style={{height: \"40px\", width: \"100%\", marginBottom: \"2px\"}}>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        // for (var i = 0; i < 6 - guesses.length; i++) {\n        //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n        // }\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"wordleLetter\" style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}>\n                    {c[0].toUpperCase()}\n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"wordleLetter\"  style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}>\n                        {c[0].toUpperCase()}\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"wordleLetter\"  style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            {c[0].toUpperCase()}\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return (\n            <div>\n                {c}\n            </div>\n        )\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == \"\") {\n            // have this be a bar with character height\n            return (\n                <div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                </div>\n            )\n        }\n\n        const r = currentGuess.split('').map((c) => (\n            <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\", fontWeight: \"bold\"}}>\n                {c[0].toUpperCase()}\n            </div>\n        ))\n\n        var filler = 5 - r.length\n\n        for (var i = 0; i < filler; i++) {\n            r.push(<div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>)\n        }\n\n        return (\n            <div style={{display: \"block\"}}>\n                {r}\n            </div>\n        )\n    }\n\n    const renderKeyBoard = () => {\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div>{t}</div>\n                <div>{m}</div>\n                {/* add the backspace and enter keys in bottom row */}\n                <div>\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\"}}\n                        onClick={() => {\n                            \n                        }}  \n                    >\n                        Enter\n                    </div>\n                    {b}\n                </div>\n            </div>\n        )\n    }\n\n    const renderWorkspace = () => {\n        var guessesTaken = renderGuesses().length\n        var rowsLeft = 5 - guessesTaken\n\n        var rows = []\n\n        for (var i = 0; i < rowsLeft; i++) {\n            rows.push(\n                <div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <div>\n                    {renderGuesses()}\n                </div>\n                <div style={{display: \"block\", width: \"100%\", height: \"1px\"}}/>\n                {(guessCount < 6) ? (\n                    <div>\n                        {renderCurrent()}\n                    </div>\n                ) : (\n                    null\n                )}\n                \n                <div>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"testLanding\">\n            Wordle sim\n            <div>\n                Wins: {winCount}, Winstreak: {winStreak}\n            </div>\n\n            <br/>\n            <br/>\n            <div>\n                {renderWorkspace()}\n            </div>\n            {(showWord) ? (\n                <div>{currentWord}</div>\n            ) : (null)}\n            {(showIssue) ? (\n                <div>{issue}</div>\n            ) : (null)}\n            <br/>\n            <div>\n            <input\n                className=\"ctButton\"\n                style={{margin: \"none\", marginTop:\"0\", float: \"left\", border: \"none\", backgroundColor: \"white\", color: \"black\", padding: \"12px\"}}\n                \n                value={currentGuess}\n                onChange={(e)=>{\n                    toggleIssue(false)\n                    if (win || guessCount >=6) {\n                        resetGame()\n                    }\n\n                    var temp = e.target.value.substr(0,5)\n\n\n                    setGuess(temp)\n\n                }}\n                onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        submitGuess(currentGuess.toLowerCase())\n                    }\n                }}\n            />\n            <button \n                className=\"wordleButton\"\n                style={{marginLeft: \"15px\", padding: \"11px\"}}\n                onClick={() => {\n                    if (guessCount <= 6 && win == false) {\n                        submitGuess(currentGuess.toLowerCase())\n                        \n                    }\n                \n            }}>\n                Submit\n            </button>\n            <button \n                onClick={() => {\n                    resetGame()\n                    if (!win) {\n                        setWinStreak(0)\n                        setWinCount(0)\n                    }\n                    \n                }}\n                className=\"wordleReset\"\n                style={{marginLeft: \"15px\", padding: \"11px\"}}\n            >\n                Reset\n            </button>\n            </div>\n            <br/>\n            {/* <div>\n                {renderGuesses()}\n            </div>\n            <div>{renderCurrent()}</div> */}\n            <br/>\n            <div>\n                {renderKeyBoard()}\n            </div>\n            <br/>\n            <div>\n                <a href='/' className=\"wordleButton\">Return to the main page</a>\n            </div>\n\n            <br/>\n            \n        </div>\n    )\n}\n\nexport default Wordle;"]},"metadata":{},"sourceType":"module"}