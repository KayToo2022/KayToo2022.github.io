{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction Wordle() {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  var wordList = [\"tower\", \"water\", \"actor\", \"agent\"];\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const generateWord = () => {\n    // for now get word from wordlist\n    var rand = 0;\n    var word = wordList[rand];\n    console.log(word);\n    setWord(word);\n  };\n\n  const submitGuess = guess => {\n    // console.log(guess.length)\n    // if (!currentWord) {\n    //     generateWord()\n    // }\n    if (!guess || guess.length != 5) {\n      console.log(\"Guess must be 5 letters\");\n    } else {\n      var ret = [];\n\n      for (var i in guess) {\n        console.log(guess[i], currentWord[i]);\n        var val = -1;\n\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          val = 0;\n        }\n\n        ret.push([guess[i], val]);\n      }\n\n      console.log(ret);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n    }\n\n    return ret;\n  };\n\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return null;\n    }\n\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this));\n    return guesses;\n  };\n\n  const renderGuess = i => {\n    const c = i.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline\"\n      },\n      children: [c[0], \"}\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this));\n    return c;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Hello World\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        generateWord();\n        setCount(0);\n      },\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: guessCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(guessHistory);\n      },\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => {\n        console.log(e.target.value);\n        setGuess(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        submitGuess(currentGuess);\n        setCount(guessCount + 1);\n      },\n      children: \"Submit guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderGuesses()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Wordle, \"uB9pHPob0m+raS8MwNYVT/MVn8Q=\");\n\n_c = Wordle;\nexport default Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"names":["useEffect","useState","axios","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","wordList","handleResize","addEventListener","removeEventListener","generateWord","rand","word","console","log","submitGuess","guess","length","ret","i","val","indexOf","push","tempHist","renderGuesses","guesses","map","g","renderGuess","c","backgroundColor","display","e","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n\n    var wordList = [\"tower\", \"water\", \"actor\", \"agent\"]\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const generateWord = () => {\n        // for now get word from wordlist\n        var rand = 0\n        var word = wordList[rand]\n        console.log(word)\n        setWord(word)\n    }\n\n    const submitGuess = (guess) => {\n        // console.log(guess.length)\n        // if (!currentWord) {\n        //     generateWord()\n        // }\n        if (!guess || guess.length != 5) {\n            console.log(\"Guess must be 5 letters\")\n        } else {\n            var ret = []\n            for (var i in guess) {\n                console.log(guess[i], currentWord[i])\n                var val = -1\n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    val = 0\n                }\n                ret.push([guess[i], val])\n            }\n            console.log(ret)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return null\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            <div style={{backgroundColor: \"green\", display: \"inline\"}}>\n                {c[0]}}\n            </div>\n        ))\n        return c\n    }\n\n    return (\n        <div>\n            Hello World\n            <br/>\n            <button onClick={() => {\n                generateWord()\n                setCount(0)\n            }}>\n                New Game\n            </button>\n            <div>{guessCount}</div>\n            <button onClick={() => {\n                console.log(guessHistory)\n            }}>Test</button>\n            <br/>\n            <input onChange={(e)=>{\n                console.log(e.target.value)\n                setGuess(e.target.value)\n            }}/>\n            <button onClick={() => {\n                submitGuess(currentGuess)\n                setCount(guessCount + 1)\n            }}>\n                Submit guess\n            </button>\n            <div>\n                {renderGuesses()}\n            </div>\n        </div>\n    )\n}\n\nexport default Wordle;"]},"metadata":{},"sourceType":"module"}