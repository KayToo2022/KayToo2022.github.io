{"ast":null,"code":"import{useEffect,useState}from\"react\";import axios from\"axios\";import rs from\"random-seed\";import words1 from\"./files/shuffled_real_wordles.txt\";import words2 from\"./files/combined_wordlist.txt\";import{Navigate,useParams}from\"react-router\";import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function getWindowDimensions(){const{innerWidth:width,innerHeight:height}=window;return{width,height};}function Wordle(){const[devTools,toggleDev]=useState(0);const[hardReset,toggleHardReset]=useState(0);const[windowDimensions,setWindowDimensions]=useState(getWindowDimensions());const[currentWord,setWord]=useState(\"\");const[currentGuess,setGuess]=useState(\"\");const[guessCount,setCount]=useState(0);const[guessHistory,setHistory]=useState([]);const[win,setWin]=useState(false);const[rightLetters,setRight]=useState([]);const[missedLetters,setMissed]=useState([]);const[wrongLetters,setWrong]=useState([]);const[winCount,setWinCount]=useState(0);const[winStreak,setWinStreak]=useState(0);const[wordBank,setWordBank]=useState([]);const[guessBank,setGuessBank]=useState([]);const[showWord,toggleShowWord]=useState(false);const[showIssue,toggleIssue]=useState(false);const[started,toggleStarted]=useState(false);const[startTime,setStartTime]=useState(0);const[endTime,setEndTime]=useState(0);const[totalTime,setTotalTime]=useState(0);const[issue,setIssue]=useState(\"\");const[seed,setSeed]=useState(0);const[copied,setCopied]=useState(false);var gen=require('random-seed');const[wordSeed,setWordSeed]=useState(0);const[tempSeed,submitSeed]=useState(0);const[parsedSeed,setParsedSeed]=useState(-1);const[chars,setChars]=useState({});const[charPressed,setCharPressed]=useState(\"\");const kbTop=['q','w','e','r','t','y','u','i','o','p'];const kbMid=['a','s','d','f','g','h','j','k','l'];const kbBot=['z','x','c','v','b','n','m'];var urlData=window.location.href;const navigate=useNavigate();useEffect(()=>{var urlSplit=urlData.split(\"wordle/\");// if (!isNaN(parseInt(useParams().id))) {\n//     var seedData = parseInt(useParams().id)\n//     setParsedSeed(seedData)\n// }\nif(urlSplit.length>1){var seedData=parseInt(urlSplit[1]);setParsedSeed(seedData);}if(document.cookie.split(\";\").some(item=>item.trim().startsWith(\"k2wsr=\"))){var cookieData=document.cookie.split('; ').find(row=>row.startsWith('k2wsr=')).split('=')[1].split(',');setWinCount(parseInt(cookieData[0]));setWinStreak(parseInt(cookieData[1]));}else{document.cookie=\"k2wsr=0,0\";}fetch(words1).then(r=>r.text()).then(text=>{setWordBank(text.split('\\n'));});fetch(words2).then(r=>r.text()).then(text=>{setGuessBank(text.split('\\n'));});function handleResize(){setWindowDimensions(getWindowDimensions());}function handleUrlChange(){softReset();urlData=window.location.href;var urlSplit=urlData.split(\"wordle/\");if(urlSplit.length>1){setSeed(parseInt(urlSplit[1]));}}window.addEventListener('hashchange',handleUrlChange,false);// use these to handle keypress without input field\nconst onKeyDown=_ref=>{let{key}=_ref;setCharPressed(key);};const onKeyUp=_ref2=>{let{key}=_ref2;}// no real use for this yet\n;document.addEventListener('keydown',onKeyDown);document.addEventListener('keyup',onKeyUp);window.addEventListener('resize',handleResize);return()=>{window.removeEventListener('resize',handleResize);document.removeEventListener('keydown',onKeyDown);document.removeEventListener('keyup',onKeyUp);};},[]);useEffect(()=>{/* \n            since onKeyDown and onKeyUp cannot seem to see the variable but are still\n            able to use the hook, handle hook function here\n\n            resets the charPressed to a blank char since useeffect doesn't execute if\n            no change is detected\n        */if(charPressed!=\"\"){// console.log(charPressed)\ntoggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5&&charPressed!=\"Enter\"&&charPressed!=\"Backspace\"){setGuess(currentGuess+charPressed);}if(charPressed==\"Enter\"){submitGuess(currentGuess.toLowerCase());}if(charPressed==\"Backspace\"){setGuess(currentGuess.substr(0,currentGuess.length-1));}}setCharPressed(\"\");},[charPressed]);useEffect(()=>{var temp=0;if(parsedSeed>-1){temp=parsedSeed;setParsedSeed(-1);}else{temp=Math.floor(Math.random()*10000);}// var temp = Math.floor(Math.random() * 10000)\nsetSeed(temp);},[wordBank]);useEffect(()=>{var randGen=gen(seed);setWordSeed(randGen.range(wordBank.length));},[seed]);useEffect(()=>{generateWord();},[wordSeed]);useEffect(()=>{if(winCount!=0){document.cookie=`k2wsr=${winCount},${winStreak}`;}},[winCount,winStreak]);useEffect(()=>{if(started){var st=Date.now();setStartTime(st);}else{var et=Date.now();setStartTime(et);}},[started]);useEffect(()=>{if(endTime>startTime&&win){// console.log(endTime - startTime)\nsetTotalTime(endTime-startTime);}},[endTime]);const charCount=word=>{var ret={};for(var i in word){if(word[i]in ret){ret[word[i]]+=1;}else{ret[word[i]]=1;}}return ret;};const generateWord=()=>{var rand=wordSeed;var word=wordBank[wordSeed];//var word = wordBank[Math.floor(Math.random() * wordBank.length)]\nsetChars(charCount(word));setWord(word);};const softReset=()=>{generateWord();setCount(0);setHistory([]);setWin(false);setGuess(\"\");setRight([]);setWrong([]);setMissed([]);toggleShowWord(false);setCopied(false);};const resetGame=()=>{navigate('/wordle');generateWord();setCount(0);setHistory([]);setWin(false);setGuess(\"\");setRight([]);setWrong([]);setMissed([]);toggleShowWord(false);setCopied(false);if(seed.toString().length>4){setSeed(seed+1);}else{setSeed(Math.floor(Math.random()*10000));}// setSeed(Math.floor(Math.random() * 10000))\n};const submitGuess=guess=>{if(!guess||guess.length!=5){setIssue(\"Guess must be 5 letters\");toggleIssue(true);// console.log(\"Guess must be 5 letters\")\n}else if(guessBank.indexOf(guess)<0){setIssue(\"Not a valid word\");toggleIssue(true);// console.log(\"Not a word\")\n}else{setCount(guessCount+1);var ret=[];var didWin=true;var greenLet={};var yellowLet={};// Pre-process (handles duplicates to the right)\nfor(var i in guess){var val=-1;if(guess[i]==currentWord[i]){val=1;// store that this letter is correct and should not have its color modified\nif(guess[i]in greenLet){greenLet[guess[i]]+=1;}else{greenLet[guess[i]]=1;}}else if(currentWord.indexOf(guess[i])>=0){// color (val) should be modified if color already exists and multiple does not exist\nval=0;// threshold checks\n// green + yellow\nif(guess[i]in greenLet&&guess[i]in yellowLet){if(greenLet[guess[i]]+yellowLet[guess[i]]+1>chars[guess[i]]){val=-1;}}// just green (no other yellows)\nif(guess[i]in greenLet){if(greenLet[guess[i]]+1>chars[guess[i]]){val=-1;}}// just yellow (no other greens)\nif(guess[i]in yellowLet){if(yellowLet[guess[i]]+1>chars[guess[i]]){val=-1;}}// if not modified, it is a valid yellow\nif(val==0){if(guess[i]in yellowLet){yellowLet[guess[i]]+=1;}else{yellowLet[guess[i]]=1;}}}if(val!=1){didWin=false;}if(val==1){var tempRight=rightLetters;tempRight.push(guess[i]);setRight(tempRight);}if(val==0){var tempMissed=missedLetters;tempMissed.push(guess[i]);setMissed(tempMissed);}if(val==-1){var tempWrong=wrongLetters;tempWrong.push(guess[i]);setWrong(tempWrong);}ret.push([guess[i],val]);}// tempChars is meant to be used like a yellowLet\nvar tempChars={};// Post process\n// go back to each yellow and see if it needs to be changed\n// test on seed 3896 epees (correct previous), penne (control), tepee (l to r)\nfor(var i in ret){// check only yellow chars\nif(ret[i][1]==0){// track current char count for each character\nif(ret[i][0]in tempChars){tempChars[ret[i][0]]+=1;}else{tempChars[ret[i][0]]=1;}if(ret[i][0]in greenLet){// check against green let and see if it breaks threshold\nif(tempChars[ret[i][0]]+greenLet[ret[i][0]]>chars[ret[i][0]]){ret[i][1]=-1;}// yellow threshold is handled in the pre process of ret\n// since the first valid yellow is allowed and handled accordingly, we don't need to handle it again\n}}}setWin(didWin);var tempHist=guessHistory;tempHist.push(ret);setHistory(tempHist);setGuess(\"\");if(didWin){setWinCount(winCount+1);setWinStreak(winStreak+1);toggleStarted(false);setEndTime(Date.now());// resetGame()\n}if(!didWin&&guessCount>=5){setWinStreak(0);toggleShowWord(true);toggleStarted(false);setEndTime(Date.now());// resetGame()\n}}return ret;};const renderGuesses=()=>{if(guessHistory.length==0){return[];}const guesses=guessHistory.map(g=>/*#__PURE__*/_jsx(\"div\",{style:{width:\"100%\",marginBottom:\"4.5px\"},children:renderGuess(g)}));// for (var i = 0; i < 6 - guesses.length; i++) {\n//     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n// }\nreturn guesses;};const renderGuess=i=>{const c=i.map(c=>c[1]==0?/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{backgroundColor:\"#cdab4b\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"#cdab4b\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\",children:c[0].toUpperCase()})}):c[1]==1?/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{backgroundColor:\"green\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"green\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\",children:c[0].toUpperCase()})}):c[1]==-1?/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{backgroundColor:\"gray\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\",children:c[0].toUpperCase()})}):/*#__PURE__*/_jsx(\"div\",{children:\"error\"}));return/*#__PURE__*/_jsx(\"div\",{className:\"flexbox\",children:c});};const renderCurrent=()=>{if(currentGuess==\"\"){// have this be a bar with character height\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})})]});}const r=currentGuess.split('').map(c=>/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\",children:c[0].toUpperCase()})}));var filler=5-r.length;for(var i=0;i<filler;i++){r.push(/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}));}return/*#__PURE__*/_jsx(\"div\",{children:r});};const renderKeyBoard=()=>{const t=kbTop.map(k=>rightLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"green\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"green\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}toggleIssue(false);if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):missedLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"#cdab4b\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"#cdab4b\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):wrongLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"black\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"gray\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}));const m=kbMid.map(k=>rightLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"green\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"green\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):missedLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"#cdab4b\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"#cdab4b\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):wrongLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"black\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"gray\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}));const b=kbBot.map(k=>rightLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"green\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"green\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):missedLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"#cdab4b\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\",borderColor:\"#cdab4b\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):wrongLetters.indexOf(k)!=-1?/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"black\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}):/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"gray\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},onClick:()=>{toggleIssue(false);if(!started){toggleStarted(true);}if(win||guessCount>=6){resetGame();}if(currentGuess.length<5){setGuess(currentGuess+k);}},children:k.toUpperCase()}));return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"flexbox\",children:t}),/*#__PURE__*/_jsx(\"div\",{className:\"flexbox\",children:m}),/*#__PURE__*/_jsxs(\"div\",{className:\"flexbox\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"gray\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",width:\"auto\"},onClick:()=>{toggleIssue(false);if(guessCount<=5&&win==false){// submitGuess(currentGuess.toLowerCase())\nsetGuess(\"\");}else{resetGame();}},children:\"Clear\"}),b,/*#__PURE__*/_jsx(\"div\",{className:\"wordleLetter\",style:{backgroundColor:\"gray\",display:\"inline-block\",padding:\"1px\",margin:\"1px\",width:\"auto\"},onClick:()=>{toggleIssue(false);setGuess(currentGuess.substr(0,currentGuess.length-1));},children:\"Delete\"})]})]});};const renderWorkspace=()=>{var guessesTaken=renderGuesses().length;var rowsLeft=5-guessesTaken;var rows=[];for(var i=0;i<rowsLeft;i++){rows.push(/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"square\",style:{display:\"inline-block\",padding:\"1px\",margin:\"1px\",fontWeight:\"bold\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"content\"})})]}));}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:renderGuesses()}),guessCount<6?/*#__PURE__*/_jsx(\"div\",{children:renderCurrent()}):null,/*#__PURE__*/_jsx(\"div\",{children:rows})]});};const copyGrid=()=>{var tempText=\"\";for(var i in guessHistory){for(var j in guessHistory[i]){if(guessHistory[i][j][1]==0){tempText+=\"🟨\";}if(guessHistory[i][j][1]==1){tempText+=\"🟩\";}if(guessHistory[i][j][1]==-1){tempText+=\"⬛️\";}}tempText+='\\n';}return tempText;};return/*#__PURE__*/_jsx(\"div\",{className:\"testLanding\",style:{height:\"auto\"}// be able to submit while not in text entry\n,children:/*#__PURE__*/_jsxs(\"div\",{style:{width:\"100%\",maxWidth:\"750px\"},children:[devTools==3?/*#__PURE__*/_jsxs(\"div\",{onClick:()=>{toggleHardReset(hardReset+1);if(hardReset==2){document.cookie=\"k2wsr=0,0\";setWinCount(parseInt(0));setWinStreak(parseInt(0));toggleHardReset(0);}},style:{position:\"absolute\",backgroundColor:\"red\",top:\"0px\",right:\"0px\"},children:[\"w: \",windowDimensions.width,\", h: \",windowDimensions.height]}):null,devTools==3?/*#__PURE__*/_jsxs(\"div\",{style:{position:\"absolute\",top:\"0px\",left:\"0px\"},children:[/*#__PURE__*/_jsx(\"input\",{onChange:e=>{if(!isNaN(e.target.value)){submitSeed(parseInt(e.target.value));}else{// console.log(\"invalid\")\n}}}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setSeed(tempSeed);toggleDev(0);submitSeed(0);},children:\"Set Seed\"})]}):null,windowDimensions.width>800?/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:\"inline-block\",width:\"60%\",marginLeft:\"20%\",fontWeight:'bold',fontSize:\"48px\"},children:\"Wordle Sim\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"inline-block\",fontSize:\"24px\",width:\"20%\",textAlign:\"left\",justifyContent:'left'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Wins: \",winCount]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Winstreak: \",winStreak]})]})]}):/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:\"inline-block\",width:\"48%\",marginLeft:\"26%\",fontWeight:'bold',fontSize:\"30px\"},children:\"Wordle Sim\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"inline-block\",fontSize:\"15px\",width:\"26%\",textAlign:\"left\",justifyContent:'left'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Wins: \",winCount]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Winstreak: \",winStreak]})]})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{children:renderWorkspace()}),win&&seed.toString().length<5?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[totalTime/1000,\"s, Seed: \",seed]}),/*#__PURE__*/_jsx(\"div\",{className:\"links\",onClick:()=>{// navigator.clipboard.writeText(`Solved this wordle-like game in ${(totalTime)/1000} seconds. See if you can do better\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\nnavigator.clipboard.writeText(`Guesses: ${guessHistory.length}/6\\nTime: ${(totalTime/1000).toFixed(2)} s\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`);setCopied(true);},children:copied?\"Copied\":\"Copy to Clipboard\"})]}):(showWord||devTools==3)&&seed.toString().length<5?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Word: \",currentWord,\" Seed: \",seed]}),/*#__PURE__*/_jsx(\"div\",{className:\"links\",onClick:()=>{// navigator.clipboard.writeText(`This word is a tough one. See if you can solve it\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\nnavigator.clipboard.writeText(`Guesses: X/6\\nTime: N/A\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`);setCopied(true);},children:copied?\"Copied\":\"Copy to Clipboard\"})]}):showIssue&&seed.toString().length<5?/*#__PURE__*/_jsx(\"div\",{children:issue}):null,win&&seed.toString().length>=5?/*#__PURE__*/_jsxs(\"div\",{children:[totalTime/1000,\"s\"]}):(showWord||devTools==3)&&seed.toString().length>=5?/*#__PURE__*/_jsx(\"div\",{children:currentWord}):showIssue&&seed.toString().length>=5?/*#__PURE__*/_jsx(\"div\",{children:issue}):null,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"flexbox\",children:win?/*#__PURE__*/_jsx(\"button\",{onClick:()=>{resetGame();},className:\"wordleButton\",style:{padding:\"11px\",width:\"100%\"},children:\"Continue\"}):/*#__PURE__*/_jsxs(\"div\",{style:{display:\"inline\",width:\"100%\"},children:[/*#__PURE__*/_jsx(\"button\",{className:\"wordleButton\",style:{padding:\"11px\",width:\"40%\",marginRight:\"5%\"},onClick:()=>{if(guessCount<=5&&win==false){submitGuess(currentGuess.toLowerCase());}else{resetGame();}},children:\"Submit\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{if(guessCount==0){if(devTools==3){toggleDev(0);}else{toggleDev(devTools+1);}}else{toggleDev(0);}resetGame();toggleStarted(false);if(!win){setWinStreak(0);if(guessCount<=5){setSeed(Math.floor(Math.random()*10000));}}},className:\"wordleReset\",style:{padding:\"11px\",width:\"40%\"},children:\"Reset\"})]})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{children:renderKeyBoard()}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"/\",className:\"wordleButton\",children:\"Return to the main page\"})}),/*#__PURE__*/_jsx(\"br\",{})]})});}export default Wordle;","map":{"version":3,"names":["useEffect","useState","axios","rs","words1","words2","Navigate","useParams","useNavigate","jsx","_jsx","jsxs","_jsxs","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","devTools","toggleDev","hardReset","toggleHardReset","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","winCount","setWinCount","winStreak","setWinStreak","wordBank","setWordBank","guessBank","setGuessBank","showWord","toggleShowWord","showIssue","toggleIssue","started","toggleStarted","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","issue","setIssue","seed","setSeed","copied","setCopied","gen","require","wordSeed","setWordSeed","tempSeed","submitSeed","parsedSeed","setParsedSeed","chars","setChars","charPressed","setCharPressed","kbTop","kbMid","kbBot","urlData","location","href","navigate","urlSplit","split","length","seedData","parseInt","document","cookie","some","item","trim","startsWith","cookieData","find","row","fetch","then","r","text","handleResize","handleUrlChange","softReset","addEventListener","onKeyDown","_ref","key","onKeyUp","_ref2","removeEventListener","resetGame","submitGuess","toLowerCase","substr","temp","Math","floor","random","randGen","range","generateWord","st","Date","now","et","charCount","word","ret","i","rand","toString","guess","indexOf","didWin","greenLet","yellowLet","val","tempRight","push","tempMissed","tempWrong","tempChars","tempHist","renderGuesses","guesses","map","g","style","marginBottom","children","renderGuess","c","className","backgroundColor","display","padding","margin","fontWeight","borderColor","toUpperCase","renderCurrent","filler","renderKeyBoard","t","k","onClick","m","b","renderWorkspace","guessesTaken","rowsLeft","rows","copyGrid","tempText","j","maxWidth","position","top","right","left","onChange","e","isNaN","target","value","marginLeft","fontSize","textAlign","justifyContent","navigator","clipboard","writeText","toFixed","marginRight"],"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport rs from \"random-seed\"\nimport words1 from \"./files/shuffled_real_wordles.txt\"\nimport words2 from \"./files/combined_wordlist.txt\"\nimport { Navigate, useParams } from \"react-router\";\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n\n    const [devTools, toggleDev] = useState(0);\n    const [hardReset, toggleHardReset] = useState(0);\n\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n    \n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const [winCount, setWinCount] = useState(0);\n    const [winStreak, setWinStreak] = useState(0);\n\n    const [wordBank, setWordBank] = useState([]);\n    const [guessBank, setGuessBank] = useState([]);\n\n    const [showWord, toggleShowWord] = useState(false);\n    const [showIssue, toggleIssue] = useState(false);\n\n    const [started, toggleStarted] = useState(false);\n    const [startTime, setStartTime] = useState(0);\n    const [endTime, setEndTime] = useState(0);\n    const [totalTime, setTotalTime] = useState(0);\n\n    const [issue, setIssue] = useState(\"\")\n\n    const [seed, setSeed] = useState(0)\n\n    const [copied, setCopied] = useState(false)\n\n    var gen = require('random-seed')\n\n    const [wordSeed, setWordSeed] = useState(0)\n    const [tempSeed, submitSeed] = useState(0)\n    const [parsedSeed, setParsedSeed] = useState(-1)\n\n    const [chars, setChars] = useState({})\n\n    const [charPressed, setCharPressed] = useState(\"\")\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'] \n\n    var urlData = window.location.href\n\n    const navigate = useNavigate()\n\n    \n\n    useEffect(() => {\n\n        var urlSplit = urlData.split(\"wordle/\")\n\n\n\n        // if (!isNaN(parseInt(useParams().id))) {\n        //     var seedData = parseInt(useParams().id)\n        //     setParsedSeed(seedData)\n        // }\n\n        if (urlSplit.length > 1){\n            var seedData = parseInt(urlSplit[1])\n            setParsedSeed(seedData)\n        }\n\n        if (document.cookie\n                .split(\";\")\n                .some(item => item.trim().startsWith(\"k2wsr=\"))) {\n                    var cookieData = document.cookie.split('; ').find(row => row.startsWith('k2wsr=')).split('=')[1].split(',')\n                    setWinCount(parseInt(cookieData[0]))\n                    setWinStreak(parseInt(cookieData[1]))\n        } else {\n            document.cookie= \"k2wsr=0,0\"\n        }\n        \n        fetch(words1)\n            .then(r => r.text())\n            .then(text => {\n                setWordBank(text.split('\\n'))\n            })\n\n        fetch(words2)\n            .then(r => r.text())\n            .then(text => {\n                setGuessBank(text.split('\\n'))\n            })\n        \n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n        function handleUrlChange() {\n            softReset()\n\n            urlData = window.location.href\n            var urlSplit = urlData.split(\"wordle/\")\n\n\n            if (urlSplit.length > 1) {\n                setSeed(parseInt(urlSplit[1]))\n            }\n\n        }\n        window.addEventListener(\n            'hashchange',\n            handleUrlChange,\n            false\n        );\n\n        // use these to handle keypress without input field\n\n        const onKeyDown = ({key}) => {\n\n            setCharPressed(key)\n\n\n        }\n\n        const onKeyUp = ({key}) => {\n            // no real use for this yet\n        }\n\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('keyup', onKeyUp);\n\n\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('keyup', onKeyUp);\n        }\n\n        \n    }, []);\n\n    useEffect(() => {\n        /* \n            since onKeyDown and onKeyUp cannot seem to see the variable but are still\n            able to use the hook, handle hook function here\n\n            resets the charPressed to a blank char since useeffect doesn't execute if\n            no change is detected\n        */\n        if (charPressed != \"\") {\n            // console.log(charPressed)\n\n            toggleIssue(false)\n            if (!started) {\n                toggleStarted(true)\n            }\n            if (win || guessCount >=6) {\n                resetGame()\n            }\n            if (currentGuess.length < 5 && charPressed != \"Enter\" && charPressed !=\"Backspace\") {\n                setGuess(currentGuess+charPressed)\n            }\n            if (charPressed == \"Enter\") {\n                submitGuess(currentGuess.toLowerCase())\n            }\n            if (charPressed == \"Backspace\") {\n                setGuess(currentGuess.substr(0,currentGuess.length -1 ))\n            }\n        }\n        setCharPressed(\"\")\n    }, [charPressed])\n\n\n    useEffect(() => {\n        var temp = 0\n\n        if (parsedSeed > -1) {\n            temp = parsedSeed\n            setParsedSeed(-1)\n        } else {\n            temp = Math.floor(Math.random() * 10000)\n        }\n        // var temp = Math.floor(Math.random() * 10000)\n        \n        setSeed(temp)\n\n    }, [wordBank])\n\n    useEffect(() => { \n        var randGen = gen(seed);\n        setWordSeed(randGen.range(wordBank.length))\n    }, [seed])\n\n    useEffect(() => {\n        generateWord()\n    }, [wordSeed])\n\n    useEffect(() => {\n        if (winCount != 0) {\n            document.cookie = `k2wsr=${winCount},${winStreak}`\n        }\n        \n    }, [winCount, winStreak]) \n\n    useEffect(() => {\n        if (started) {\n            var st = Date.now()\n            setStartTime(st)\n        } else {\n            var et = Date.now()\n            setStartTime(et)\n        }\n        \n    }, [started])\n\n    useEffect(() => {\n        if (endTime > startTime && win) {\n            // console.log(endTime - startTime)\n            setTotalTime(endTime-startTime)\n        }\n    }, [endTime])\n\n    const charCount = (word) => {\n        var ret = {}\n        for (var i in word) {\n            if (word[i] in ret) {\n                ret[word[i]] += 1\n            } else {\n                ret[word[i]] = 1\n            }\n        }\n        return ret\n    }\n\n    const generateWord = () => {\n        var rand = wordSeed\n        var word = wordBank[wordSeed]\n        //var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n        setChars(charCount(word))\n        setWord(word)\n    }\n\n    const softReset = () => {\n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n        setCopied(false)\n    }\n\n    const resetGame = () => {\n        \n        navigate('/wordle')\n        \n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n        setCopied(false)\n        if (seed.toString().length > 4) {\n            setSeed(seed + 1)\n        } else {\n            setSeed(Math.floor(Math.random() * 10000))\n        }\n        // setSeed(Math.floor(Math.random() * 10000))\n    }\n\n    \n\n    const submitGuess = (guess) => {\n        if (!guess || guess.length != 5) {\n            setIssue(\"Guess must be 5 letters\")\n            toggleIssue(true)\n            // console.log(\"Guess must be 5 letters\")\n        } else if (guessBank.indexOf(guess) < 0){\n            setIssue(\"Not a valid word\")\n            toggleIssue(true)\n            // console.log(\"Not a word\")\n        } else {\n            setCount(guessCount + 1)\n            var ret = []\n            var didWin = true;\n\n            var greenLet = {}\n            var yellowLet = {}\n\n            // Pre-process (handles duplicates to the right)\n            for (var i in guess) {\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                    // store that this letter is correct and should not have its color modified\n                    if (guess[i] in greenLet) {\n                        greenLet[guess[i]] += 1\n                    } else {\n                        greenLet[guess[i]] = 1\n                    }\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    // color (val) should be modified if color already exists and multiple does not exist\n                    \n                    val = 0\n\n                    // threshold checks\n\n                    // green + yellow\n                    if (guess[i] in greenLet && guess[i] in yellowLet) {\n                        if (greenLet[guess[i]] + yellowLet[guess[i]] + 1 > chars[guess[i]]) {\n                            val = -1\n\n                        }\n                    }\n\n                    // just green (no other yellows)\n                    if (guess[i] in greenLet) {\n\n                        if (greenLet[guess[i]] + 1 > chars[guess[i]]) {\n                            val = -1\n\n                        }\n                    }\n\n                    // just yellow (no other greens)\n                    if (guess[i] in yellowLet) {\n                        if (yellowLet[guess[i]] + 1 > chars[guess[i]]) {\n                            val = -1\n\n                        }\n                    }\n\n                    // if not modified, it is a valid yellow\n                    if (val == 0) {\n                        if (guess[i] in yellowLet) {\n                            yellowLet[guess[i]] += 1\n                        } else {\n                            yellowLet[guess[i]] = 1\n                        }\n                    }\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            \n\n\n            \n            // tempChars is meant to be used like a yellowLet\n            var tempChars = {}\n\n            // Post process\n            // go back to each yellow and see if it needs to be changed\n            // test on seed 3896 epees (correct previous), penne (control), tepee (l to r)\n\n            for (var i in ret) {\n                // check only yellow chars\n                if (ret[i][1] == 0) {\n                    // track current char count for each character\n                    if (ret[i][0] in tempChars) {\n                        tempChars[ret[i][0]] += 1\n                    } else {\n                        tempChars[ret[i][0]] = 1\n                    }\n\n\n                    if (ret[i][0] in greenLet){\n                        // check against green let and see if it breaks threshold\n\n                        if (tempChars[ret[i][0]] + greenLet[ret[i][0]] > chars[ret[i][0]]) {\n                            ret[i][1] = -1 \n                        }\n                        // yellow threshold is handled in the pre process of ret\n                        // since the first valid yellow is allowed and handled accordingly, we don't need to handle it again\n\n                    } \n                }\n            }\n\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n            setGuess(\"\")\n            if (didWin) {\n                setWinCount(winCount + 1)\n                setWinStreak(winStreak + 1)\n                toggleStarted(false)\n                setEndTime(Date.now())\n                \n                // resetGame()\n            }\n            if (!didWin && guessCount >= 5) {\n                setWinStreak(0)\n                toggleShowWord(true)\n                toggleStarted(false)\n                setEndTime(Date.now())\n                \n                // resetGame()\n            }\n            \n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return []\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div style={{width: \"100%\", marginBottom: \"4.5px\"}}>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        // for (var i = 0; i < 6 - guesses.length; i++) {\n        //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n        // }\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"square\" style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}>\n                    <div className=\"content\">\n                        {c[0].toUpperCase()}\n                    </div>    \n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"square\"  style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"square\"  style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            <div className=\"content\">\n                                {c[0].toUpperCase()}\n                            </div>\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return (\n            <div className=\"flexbox\">\n                {c}\n            </div>\n        )\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == \"\") {\n            // have this be a bar with character height\n            return (\n                <div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                </div>\n            )\n        }\n\n        const r = currentGuess.split('').map((c) => (\n            <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>    \n                    </div>\n\n        ))\n\n        var filler = 5 - r.length\n\n        for (var i = 0; i < filler; i++) {\n            r.push(\n                <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                    <div className=\"content\">\n                        \n                    </div>    \n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {r}\n            </div>\n        )\n    }\n\n    const renderKeyBoard = () => {\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div className=\"flexbox\">{t}</div>\n                <div className=\"flexbox\">{m}</div>\n                {/* add the backspace and enter keys in bottom row */}\n                <div className=\"flexbox\">\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (guessCount <= 5 && win == false) {\n                                // submitGuess(currentGuess.toLowerCase())\n                                setGuess(\"\")\n                                \n                            } else {\n                                resetGame()\n                            }\n                        }}  \n                    >\n                        Clear\n                    </div>\n                    {b}\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            setGuess(currentGuess.substr(0,currentGuess.length -1 ))\n                        }}  \n                    >\n                        Delete\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const renderWorkspace = () => {\n        var guessesTaken = renderGuesses().length\n        var rowsLeft = 5 - guessesTaken\n\n        var rows = []\n\n        for (var i = 0; i < rowsLeft; i++) {\n            rows.push(\n                <div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <div>\n                    {renderGuesses()}\n                </div>\n                {/* <div style={{display: \"block\", width: \"100%\", height: \"3px\"}}/> */}\n                {(guessCount < 6) ? (\n                    <div>\n                        {renderCurrent()}\n                    </div>\n                ) : (\n                    null\n                )}\n                \n                <div>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    const copyGrid = () => {\n        var tempText = \"\"\n\n        for (var i in guessHistory) {\n\n            for (var j in guessHistory[i]) {\n\n                if (guessHistory[i][j][1] == 0) {\n                    tempText += \"🟨\"\n                }\n                if (guessHistory[i][j][1] == 1) {\n                    tempText += \"🟩\"\n                }\n                if (guessHistory[i][j][1] == -1) {\n                    tempText += \"⬛️\"\n                }\n            }\n\n            tempText += '\\n'\n        }\n\n        return tempText\n    }\n\n\n\n    return (\n        <div className=\"testLanding\" style={{height: \"auto\"}}\n            // be able to submit while not in text entry\n\n\n        >\n            <div style={{width: \"100%\", maxWidth: \"750px\"}}>\n                {(devTools == 3) ? (\n                    <div  \n                        onClick={() => {\n                            toggleHardReset(hardReset + 1)\n                            if (hardReset == 2) {\n                                document.cookie= \"k2wsr=0,0\"\n                                setWinCount(parseInt(0))\n                                setWinStreak(parseInt(0))\n                                toggleHardReset(0)\n                            }\n                        }} \n                        style={{position: \"absolute\", backgroundColor: \"red\", top: \"0px\", right: \"0px\"}}\n                    >\n                        w: {windowDimensions.width}, h: {windowDimensions.height}\n                    </div>\n                    \n                ) : (\n                    null\n                )}\n\n                {(devTools == 3) ? (\n                    <div style={{position: \"absolute\", top: \"0px\", left: \"0px\"}}>\n                    <input\n                        \n                        onChange={(e) => {\n                            if (!isNaN(e.target.value)) {\n                                submitSeed(parseInt(e.target.value))\n                            } else {\n                                // console.log(\"invalid\")\n                            }\n                        }}\n                    />\n                    <button\n                        onClick={() => {\n                            setSeed(tempSeed)\n                            toggleDev(0)\n                            submitSeed(0)\n                        }}\n                    >Set Seed</button>\n                    {/* <button\n                        onClick={() => {\n\n                        }}\n                    >Test</button> */}\n                    </div>\n                ) : (\n                    null\n                )}\n\n                {(windowDimensions.width > 800) ? (\n                    <div style={{width: '100%'}}>\n                        <div style={{display: \"inline-block\", width: \"60%\", marginLeft: \"20%\", fontWeight: 'bold', fontSize: \"48px\"}}>\n                            Wordle Sim\n                        </div>\n                        \n                        <div style={{display: \"inline-block\", fontSize: \"24px\", width: \"20%\", textAlign: \"left\", justifyContent:'left'}}>\n                            <div>\n                                Wins: {winCount}\n                            </div>\n                            <div>\n                                Winstreak: {winStreak}\n                            </div>\n                        </div>\n                    </div>  \n                ) : (\n                    <div style={{width: '100%'}}>\n                        <div style={{display: \"inline-block\", width: \"48%\", marginLeft: \"26%\", fontWeight: 'bold', fontSize: \"30px\"}}>\n                            Wordle Sim\n                        </div>\n                        \n                        <div style={{display: \"inline-block\", fontSize: \"15px\", width: \"26%\", textAlign: \"left\", justifyContent:'left'}}>\n                            <div>\n                                Wins: {winCount}\n                            </div>\n                            <div>\n                                Winstreak: {winStreak}\n                            </div>\n                        </div>\n                    </div> \n                )}\n\n                \n\n                {/* Wordle sim\n                <br/> */}\n\n                \n                \n\n                <br/>\n\n                <div>\n                    {renderWorkspace()}\n                </div>\n                \n                {(win && seed.toString().length < 5) ? (\n                    <div>\n                        <div>\n                            {(totalTime)/1000}s, Seed: {seed}\n                        </div>\n                        <div className=\"links\" onClick={() => {\n                                    // navigator.clipboard.writeText(`Solved this wordle-like game in ${(totalTime)/1000} seconds. See if you can do better\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                    navigator.clipboard.writeText(`Guesses: ${guessHistory.length}/6\\nTime: ${((totalTime)/1000).toFixed(2)} s\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                    setCopied(true)\n                                }   \n                            }>\n                            {(copied) ? (\n                                \"Copied\"\n                            ) : (\n                                \"Copy to Clipboard\"\n                            )}\n                            \n                        </div>\n                    </div>\n                ) : (\n                    ((showWord || devTools == 3) && seed.toString().length < 5) ? (\n                        <div>\n                            <div>\n                                Word: {currentWord} Seed: {seed}\n                            </div>\n                            <div className=\"links\" onClick={() => {\n                                        // navigator.clipboard.writeText(`This word is a tough one. See if you can solve it\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                        navigator.clipboard.writeText(`Guesses: X/6\\nTime: N/A\\n${copyGrid()}\\n${urlData.split(\"wordle\")[0]}wordle/${seed}`)\n                                        setCopied(true)\n                                    }\n                                }>\n                                {(copied) ? (\n                                    \"Copied\"\n                                ) : (\n                                    \"Copy to Clipboard\"\n                                )}\n                            </div>\n                        </div>\n                    ) : (\n                        (showIssue && seed.toString().length < 5) ? (\n                            <div>{issue}</div>\n                        ) : (\n                            null\n                            )\n                        )\n                )}\n\n                {(win && seed.toString().length >= 5) ? (\n                    <div>\n                        {(totalTime)/1000}s\n                    </div>\n                ) : (\n                    ((showWord || devTools == 3) && seed.toString().length >= 5) ? (\n                        <div>{currentWord}</div>\n                    ) : (\n                        (showIssue && seed.toString().length >= 5) ? (\n                            <div>{issue}</div>\n                        ) : (\n                            null\n                            )\n                        )\n                )}\n\n                <br/>\n                <div className=\"flexbox\">\n\n                \n                {\n                // old input box, might still need it\n\n                /* <input\n                    className=\"ctButton\"\n                    style={{marginLeft: \"5%\", marginRight: \"5%\",marginTop:\"0\", float: \"left\", border: \"none\", backgroundColor: \"white\", color: \"black\", padding: \"12px\", width: \"30%\", justifyContent: \"center\"}}\n                    \n                    value={currentGuess}\n                    onChange={(e)=>{\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n\n                        var temp = e.target.value.substr(0,5)\n\n\n                        setGuess(temp)\n\n                    }}\n                    // attempting to have keyboard functionality without text input box\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            submitGuess(currentGuess.toLowerCase())\n                        }\n                    }}\n                /> */}\n            \n                {(win) ? (\n                    <button \n                        onClick={() => {\n                            resetGame()\n                        }}\n                        className=\"wordleButton\"\n                        style={{padding: \"11px\", width: \"100%\"}}\n                    >\n                        Continue\n                    </button>\n                ) : (\n                    <div style={{display: \"inline\", width: \"100%\"}}>\n                        <button \n                            className=\"wordleButton\"\n                            style={{padding: \"11px\", width: \"40%\", marginRight: \"5%\"}}\n                            onClick={() => {\n                                if (guessCount <= 5 && win == false) {\n                                    submitGuess(currentGuess.toLowerCase())\n                                    \n                                } else {\n                                    resetGame()\n                                }\n                            \n                        }}>\n                            Submit\n                        </button>\n                        <button \n                            onClick={() => {\n                                if (guessCount == 0){\n                                    if (devTools == 3) {\n                                        toggleDev(0)\n                                    } else {\n                                        toggleDev(devTools + 1)\n                                    }\n                                } else {\n                                    toggleDev(0)\n                                }\n                                resetGame()\n                                toggleStarted(false)\n                                if (!win) {\n                                    setWinStreak(0)\n                                    if (guessCount <= 5) {\n                                        setSeed(Math.floor(Math.random() * 10000))\n                                    }\n                                }\n\n                                \n                            }}\n                            className=\"wordleReset\"\n                            style={{padding: \"11px\", width: \"40%\"}}\n                        >\n                            Reset\n                        </button>\n                    </div>\n                )}\n                \n                </div>\n\n                <br/>\n                <div>\n                    {renderKeyBoard()}\n                </div>\n                <br/>\n                <div>\n                    <a href='/' className=\"wordleButton\">Return to the main page</a>\n                </div>\n\n                <br/>\n            </div>\n        </div>\n    )\n}\n\nexport default Wordle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}