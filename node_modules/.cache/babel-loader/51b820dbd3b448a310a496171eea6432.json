{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction Wordle() {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  const [win, setWin] = useState(false);\n  const [rightLetters, setRight] = useState([]);\n  const [missedLetters, setMissed] = useState([]);\n  const [wrongLetters, setWrong] = useState([]);\n  const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n  const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];\n  const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];\n  var wordList = [\"tower\", \"water\", \"actor\", \"agent\"];\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const generateWord = () => {\n    // for now get word from wordlist\n    var rand = 0;\n    var word = wordList[rand];\n    console.log(word);\n    setWord(word);\n  };\n\n  const submitGuess = guess => {\n    // console.log(guess.length)\n    // if (!currentWord) {\n    //     generateWord()\n    // }\n    if (!guess || guess.length != 5) {\n      console.log(\"Guess must be 5 letters\");\n    } else {\n      var ret = [];\n      var didWin = true;\n\n      for (var i in guess) {\n        console.log(guess[i], currentWord[i]);\n        var val = -1;\n\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          val = 0;\n        }\n\n        if (val != 1) {\n          didWin = false;\n        }\n\n        if (val == 1) {\n          var tempRight = rightLetters;\n          tempRight.push(guess[i]);\n          setRight(tempRight);\n        }\n\n        if (val == 0) {\n          var tempMissed = missedLetters;\n          tempMissed.push(guess[i]);\n          setMissed(tempMissed);\n        }\n\n        if (val == -1) {\n          var tempWrong = wrongLetters;\n          tempWrong.push(guess[i]);\n          setWrong(tempWrong);\n        }\n\n        ret.push([guess[i], val]);\n      }\n\n      console.log(ret);\n      console.log(didWin);\n      setWin(didWin);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n    }\n\n    return ret;\n  };\n\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return null;\n    }\n\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this));\n    return guesses;\n  };\n\n  const renderGuess = i => {\n    const c = i.map(c => c[1] == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this) : c[1] == 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }, this) : c[1] == -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 26\n    }, this));\n    return c;\n  };\n\n  const renderCurrent = () => {\n    if (currentGuess == null) {\n      return null;\n    }\n\n    const r = currentGuess.split().map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this));\n    return r;\n  };\n\n  const renderKeyBoard = () => {\n    //  console.log(\"E in right\", rightLetters.indexOf('e') != -1)\n    const t = kbTop.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }, this));\n    const m = kbMid.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }, this));\n    const b = kbBot.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        console.log(k);\n        setGuess(currentGuess + k);\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 25\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: m\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: b\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Wordle sim\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        generateWord();\n        setCount(0);\n        setHistory([]);\n        setWin(false);\n        setRight([]);\n        setWrong([]);\n        setMissed([]);\n      },\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: guessCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(rightLetters);\n        console.log(missedLetters);\n        console.log(wrongLetters);\n      },\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      // Need to clear input on button press \n      defaultValue: currentGuess,\n      onChange: e => {\n        console.log(e.target.value);\n        setGuess(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (guessCount <= 6 && win == false) {\n          submitGuess(currentGuess.toLowerCase());\n          setCount(guessCount + 1);\n        }\n      },\n      children: \"Submit guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderGuesses()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderCurrent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderKeyBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Wordle, \"awzvTXP7IHjP/cHTvPwtOumzpQQ=\");\n\n_c = Wordle;\nexport default Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"names":["useEffect","useState","axios","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","kbTop","kbMid","kbBot","wordList","handleResize","addEventListener","removeEventListener","generateWord","rand","word","console","log","submitGuess","guess","length","ret","didWin","i","val","indexOf","tempRight","push","tempMissed","tempWrong","tempHist","renderGuesses","guesses","map","g","renderGuess","c","backgroundColor","display","padding","margin","fontWeight","toUpperCase","renderCurrent","r","split","renderKeyBoard","t","k","m","b","e","target","value","toLowerCase"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n\n    var wordList = [\"tower\", \"water\", \"actor\", \"agent\"]\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const generateWord = () => {\n        // for now get word from wordlist\n        var rand = 0\n        var word = wordList[rand]\n        console.log(word)\n        setWord(word)\n    }\n\n    const submitGuess = (guess) => {\n        // console.log(guess.length)\n        // if (!currentWord) {\n        //     generateWord()\n        // }\n        if (!guess || guess.length != 5) {\n            console.log(\"Guess must be 5 letters\")\n        } else {\n            var ret = []\n            var didWin = true;\n\n            for (var i in guess) {\n                console.log(guess[i], currentWord[i])\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    val = 0\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            console.log(ret)\n            console.log(didWin)\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n\n            \n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return null\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"wordleLetter\" style={{backgroundColor: \"#cdab4b\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                    {c[0].toUpperCase()}\n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"wordleLetter\"  style={{backgroundColor: \"green\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        {c[0].toUpperCase()}\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"wordleLetter\"  style={{backgroundColor: \"gray\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            {c[0].toUpperCase()}\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return c\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == null) {\n            return null\n        }\n        const r = currentGuess.split().map((c) => (\n            <div className=\"wordleLetter\" style={{display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                {c[0].toUpperCase()}\n            </div>\n        ))\n\n        return r\n    }\n\n    const renderKeyBoard = () => {\n        //  console.log(\"E in right\", rightLetters.indexOf('e') != -1)\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                    onClick={() => {\n                        console.log(k)\n                        setGuess(currentGuess+k)\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                        onClick={() => {\n                            console.log(k)\n                            setGuess(currentGuess+k)\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                console.log(k)\n                                setGuess(currentGuess+k)\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                console.log(k)\n                                setGuess(currentGuess+k)\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                    onClick={() => {\n                        console.log(k)\n                        setGuess(currentGuess+k)\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                        onClick={() => {\n                            console.log(k)\n                            setGuess(currentGuess+k)\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                console.log(k)\n                                setGuess(currentGuess+k)\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                console.log(k)\n                                setGuess(currentGuess+k)\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                    onClick={() => {\n                        console.log(k)\n                        setGuess(currentGuess+k)\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                        onClick={() => {\n                            console.log(k)\n                            setGuess(currentGuess+k)\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                console.log(k)\n                                setGuess(currentGuess+k)\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                console.log(k)\n                                setGuess(currentGuess+k)\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div>{t}</div>\n                <div>{m}</div>\n                <div>{b}</div>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            Wordle sim\n            <br/>\n            <button onClick={() => {\n                generateWord()\n                setCount(0)\n                setHistory([])\n                setWin(false)\n                setRight([])\n                setWrong([])\n                setMissed([])\n            }}>\n                New Game\n            </button>\n            <div>{guessCount}</div>\n            <button onClick={() => {\n                console.log(rightLetters)\n                console.log(missedLetters)\n                console.log(wrongLetters)\n            }}>Test</button>\n            <br/>\n            <input\n                // Need to clear input on button press \n                defaultValue={currentGuess}\n                onChange={(e)=>{\n                    console.log(e.target.value)\n                    setGuess(e.target.value)\n                }}\n            />\n            <button onClick={() => {\n                if (guessCount <= 6 && win == false) {\n                    submitGuess(currentGuess.toLowerCase())\n                    setCount(guessCount + 1)\n                }\n                \n            }}>\n                Submit guess\n            </button>\n            <div>\n                {renderGuesses()}\n            </div>\n            <div>{renderCurrent()}</div>\n            <br/>\n            <div>\n                {renderKeyBoard()}\n            </div>\n            {/* <div>\n                Right Letters: {rightLetters}\n            </div>\n            <div>\n                Misplaced Letters: {missedLetters}\n            </div>\n            <div>\n                Wrong Letters : {wrongLetters}\n            </div> */}\n        </div>\n    )\n}\n\nexport default Wordle;"]},"metadata":{},"sourceType":"module"}