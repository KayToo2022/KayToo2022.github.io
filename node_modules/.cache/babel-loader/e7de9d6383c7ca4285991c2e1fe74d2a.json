{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport rs from \"random-seed\";\nimport words1 from \"./files/shuffled_real_wordles.txt\";\nimport words2 from \"./files/combined_wordlist.txt\";\nimport { Navigate, useParams } from \"react-router\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction Wordle() {\n  _s();\n\n  const [devTools, toggleDev] = useState(0);\n  const [hardReset, toggleHardReset] = useState(0);\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  const [win, setWin] = useState(false);\n  const [rightLetters, setRight] = useState([]);\n  const [missedLetters, setMissed] = useState([]);\n  const [wrongLetters, setWrong] = useState([]);\n  const [winCount, setWinCount] = useState(0);\n  const [winStreak, setWinStreak] = useState(0);\n  const [wordBank, setWordBank] = useState([]);\n  const [guessBank, setGuessBank] = useState([]);\n  const [showWord, toggleShowWord] = useState(false);\n  const [showIssue, toggleIssue] = useState(false);\n  const [started, toggleStarted] = useState(false);\n  const [startTime, setStartTime] = useState(0);\n  const [endTime, setEndTime] = useState(0);\n  const [totalTime, setTotalTime] = useState(0);\n  const [issue, setIssue] = useState(\"\");\n  const [seed, setSeed] = useState(0);\n\n  var gen = require('random-seed');\n\n  const [wordSeed, setWordSeed] = useState(0);\n  const [tempSeed, submitSeed] = useState(0);\n  const [parsedSeed, setParsedSeed] = useState(-1);\n  const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n  const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];\n  const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];\n  var urlData = window.location.href;\n  const navigate = useNavigate();\n  useEffect(() => {\n    var urlSplit = urlData.split(\"wordle/\"); // if (!isNaN(parseInt(useParams().id))) {\n    //     var seedData = parseInt(useParams().id)\n    //     setParsedSeed(seedData)\n    // }\n\n    if (urlSplit.length > 1) {\n      var seedData = parseInt(urlSplit[1]);\n      setParsedSeed(seedData);\n    }\n\n    if (document.cookie.split(\";\").some(item => item.trim().startsWith(\"k2wsr=\"))) {\n      var cookieData = document.cookie.split('; ').find(row => row.startsWith('k2wsr=')).split('=')[1].split(',');\n      setWinCount(parseInt(cookieData[0]));\n      setWinStreak(parseInt(cookieData[1]));\n    } else {\n      document.cookie = \"k2wsr=0,0\";\n    }\n\n    fetch(words1).then(r => r.text()).then(text => {\n      setWordBank(text.split('\\n'));\n    });\n    fetch(words2).then(r => r.text()).then(text => {\n      setGuessBank(text.split('\\n'));\n    });\n\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    function handleUrlChange() {\n      softReset();\n      urlData = window.location.href;\n      var urlSplit = urlData.split(\"wordle/\");\n\n      if (urlSplit.length > 1) {\n        setSeed(parseInt(urlSplit[1]));\n      }\n    }\n\n    window.addEventListener('hashchange', handleUrlChange, false);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  useEffect(() => {\n    var temp = 0;\n\n    if (parsedSeed > -1) {\n      temp = parsedSeed;\n      setParsedSeed(-1);\n    } else {\n      temp = Math.floor(Math.random() * 10000);\n    } // var temp = Math.floor(Math.random() * 10000)\n\n\n    setSeed(temp);\n  }, [wordBank]);\n  useEffect(() => {\n    var randGen = gen(seed);\n    setWordSeed(randGen.range(wordBank.length));\n  }, [seed]);\n  useEffect(() => {\n    generateWord();\n  }, [wordSeed]);\n  useEffect(() => {\n    if (winCount != 0) {\n      document.cookie = `k2wsr=${winCount},${winStreak}`;\n    }\n  }, [winCount, winStreak]);\n  useEffect(() => {\n    if (started) {\n      var st = Date.now();\n      setStartTime(st);\n    } else {\n      var et = Date.now();\n      setStartTime(et);\n    }\n  }, [started]);\n  useEffect(() => {\n    if (endTime > startTime && win) {\n      console.log(endTime - startTime);\n      setTotalTime(endTime - startTime);\n    }\n  }, [endTime]);\n\n  const generateWord = () => {\n    var rand = wordSeed;\n    var word = wordBank[wordSeed]; //var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n\n    setWord(word);\n  };\n\n  const softReset = () => {\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n    toggleShowWord(false);\n  };\n\n  const resetGame = () => {\n    navigate('/wordle');\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n    toggleShowWord(false);\n\n    if (seed.toString().length > 4) {\n      setSeed(seed + 1);\n    } else {\n      setSeed(Math.floor(Math.random() * 10000));\n    } // setSeed(Math.floor(Math.random() * 10000))\n\n  };\n\n  const submitGuess = guess => {\n    if (!guess || guess.length != 5) {\n      setIssue(\"Guess must be 5 letters\");\n      toggleIssue(true);\n      console.log(\"Guess must be 5 letters\");\n    } else if (guessBank.indexOf(guess) < 0) {\n      setIssue(\"Not a valid word\");\n      toggleIssue(true);\n      console.log(\"Not a word\");\n    } else {\n      setCount(guessCount + 1);\n      var ret = [];\n      var didWin = true;\n\n      for (var i in guess) {\n        var val = -1;\n\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          val = 0;\n        }\n\n        if (val != 1) {\n          didWin = false;\n        }\n\n        if (val == 1) {\n          var tempRight = rightLetters;\n          tempRight.push(guess[i]);\n          setRight(tempRight);\n        }\n\n        if (val == 0) {\n          var tempMissed = missedLetters;\n          tempMissed.push(guess[i]);\n          setMissed(tempMissed);\n        }\n\n        if (val == -1) {\n          var tempWrong = wrongLetters;\n          tempWrong.push(guess[i]);\n          setWrong(tempWrong);\n        }\n\n        ret.push([guess[i], val]);\n      }\n\n      setWin(didWin);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n      setGuess(\"\");\n\n      if (didWin) {\n        setWinCount(winCount + 1);\n        setWinStreak(winStreak + 1);\n        toggleStarted(false);\n        setEndTime(Date.now()); // resetGame()\n      }\n\n      if (!didWin && guessCount >= 5) {\n        setWinStreak(0);\n        toggleShowWord(true);\n        toggleStarted(false);\n        setEndTime(Date.now()); // resetGame()\n      }\n    }\n\n    return ret;\n  };\n\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return [];\n    }\n\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        marginBottom: \"4.5px\"\n      },\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this)); // for (var i = 0; i < 6 - guesses.length; i++) {\n    //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n    // }\n\n    return guesses;\n  };\n\n  const renderGuess = i => {\n    const c = i.map(c => c[1] == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }, this) : c[1] == 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }, this) : c[1] == -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 26\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexbox\",\n      children: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCurrent = () => {\n    if (currentGuess == \"\") {\n      // have this be a bar with character height\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this);\n    }\n\n    const r = currentGuess.split('').map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }, this));\n    var filler = 5 - r.length;\n\n    for (var i = 0; i < filler; i++) {\n      r.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"square\",\n        style: {\n          display: \"inline-block\",\n          padding: \"1px\",\n          margin: \"1px\",\n          fontWeight: \"bold\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: r\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderKeyBoard = () => {\n    const t = kbTop.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 25\n    }, this));\n    const m = kbMid.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 25\n    }, this));\n    const b = kbBot.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (!started) {\n          toggleStarted(true);\n        }\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 25\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: m\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            width: \"auto\"\n          },\n          onClick: () => {\n            toggleIssue(false);\n\n            if (guessCount <= 5 && win == false) {\n              // submitGuess(currentGuess.toLowerCase())\n              setGuess(\"\");\n            } else {\n              resetGame();\n            }\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 21\n        }, this), b, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            width: \"auto\"\n          },\n          onClick: () => {\n            toggleIssue(false);\n            setGuess(currentGuess.substr(0, currentGuess.length - 1));\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderWorkspace = () => {\n    var guessesTaken = renderGuesses().length;\n    var rowsLeft = 5 - guessesTaken;\n    var rows = [];\n\n    for (var i = 0; i < rowsLeft; i++) {\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          style: {\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            fontWeight: \"bold\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderGuesses()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 17\n      }, this), guessCount < 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderCurrent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"testLanding\",\n    style: {\n      height: \"auto\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        maxWidth: \"750px\"\n      },\n      children: [devTools == 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          toggleHardReset(hardReset + 1);\n\n          if (hardReset == 2) {\n            document.cookie = \"k2wsr=0,0\";\n            setWinCount(parseInt(0));\n            setWinStreak(parseInt(0));\n            toggleHardReset(0);\n          }\n        },\n        style: {\n          position: \"absolute\",\n          backgroundColor: \"red\",\n          top: \"0px\",\n          right: \"0px\"\n        },\n        children: [\"w: \", windowDimensions.width, \", h: \", windowDimensions.height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 21\n      }, this) : null, devTools == 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"0px\",\n          left: \"0px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            if (!isNaN(e.target.value)) {\n              submitSeed(parseInt(e.target.value));\n            } else {\n              console.log(\"invalid\");\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setSeed(tempSeed);\n            toggleDev(0);\n            submitSeed(0);\n          },\n          children: \"Set Seed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 21\n      }, this) : null, windowDimensions.width > 800 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            width: \"60%\",\n            marginLeft: \"20%\",\n            fontWeight: 'bold',\n            fontSize: \"48px\"\n          },\n          children: \"Wordle Sim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            fontSize: \"24px\",\n            width: \"20%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Wins: \", winCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Winstreak: \", winStreak]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            width: \"60%\",\n            marginLeft: \"20%\",\n            fontWeight: 'bold',\n            fontSize: \"36px\"\n          },\n          children: \"Wordle Sim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            fontSize: \"18px\",\n            width: \"20%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Wins: \", winCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Winstreak: \", winStreak]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderWorkspace()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 17\n      }, this), win && seed.toString().length < 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"links\",\n        onClick: () => {\n          navigator.clipboard.writeText(`${urlData.split(\"wordle\")[0]}wordle/${seed}`);\n        },\n        children: [totalTime / 1000, \"s, Seed: \", seed]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 21\n      }, this) : (showWord || devTools == 3) && seed.toString().length < 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [currentWord, \", Seed: \", seed]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 25\n      }, this) : showIssue && seed.toString().length < 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: issue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 29\n      }, this) : null, win && seed.toString().length >= 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [totalTime / 1000, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 21\n      }, this) : (showWord || devTools == 3) && seed.toString().length >= 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 25\n      }, this) : showIssue && seed.toString().length >= 5 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: issue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 29\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"ctButton\",\n          style: {\n            marginLeft: \"5%\",\n            marginRight: \"5%\",\n            marginTop: \"0\",\n            float: \"left\",\n            border: \"none\",\n            backgroundColor: \"white\",\n            color: \"black\",\n            padding: \"12px\",\n            width: \"30%\",\n            justifyContent: \"center\"\n          },\n          value: currentGuess,\n          onChange: e => {\n            toggleIssue(false);\n\n            if (!started) {\n              toggleStarted(true);\n            }\n\n            if (win || guessCount >= 6) {\n              resetGame();\n            }\n\n            var temp = e.target.value.substr(0, 5);\n            setGuess(temp);\n          },\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              if (win || guessCount >= 6) {\n                resetGame();\n              }\n\n              submitGuess(currentGuess.toLowerCase());\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 17\n        }, this), win ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            resetGame();\n          },\n          className: \"wordleButton\",\n          style: {\n            padding: \"11px\",\n            marginRight: \"5%\",\n            width: \"60%\"\n          },\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline\",\n            marginRight: \"5%\",\n            width: \"60%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"wordleButton\",\n            style: {\n              padding: \"11px\",\n              width: \"40%\",\n              marginRight: \"5%\"\n            },\n            onClick: () => {\n              if (guessCount <= 5 && win == false) {\n                submitGuess(currentGuess.toLowerCase());\n              } else {\n                resetGame();\n              }\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (guessCount == 0) {\n                if (devTools == 3) {\n                  toggleDev(0);\n                } else {\n                  toggleDev(devTools + 1);\n                }\n              } else {\n                toggleDev(0);\n              }\n\n              resetGame();\n              toggleStarted(false);\n\n              if (!win) {\n                setWinStreak(0);\n\n                if (guessCount <= 5) {\n                  setSeed(Math.floor(Math.random() * 10000));\n                }\n              }\n            },\n            className: \"wordleReset\",\n            style: {\n              padding: \"11px\",\n              width: \"40%\"\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderKeyBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          className: \"wordleButton\",\n          children: \"Return to the main page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 771,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Wordle, \"kEZ768lRRGfmfxWkprXrMbpf1qM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Wordle;\nexport default Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"names":["useEffect","useState","axios","rs","words1","words2","Navigate","useParams","useNavigate","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","devTools","toggleDev","hardReset","toggleHardReset","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","winCount","setWinCount","winStreak","setWinStreak","wordBank","setWordBank","guessBank","setGuessBank","showWord","toggleShowWord","showIssue","toggleIssue","started","toggleStarted","startTime","setStartTime","endTime","setEndTime","totalTime","setTotalTime","issue","setIssue","seed","setSeed","gen","require","wordSeed","setWordSeed","tempSeed","submitSeed","parsedSeed","setParsedSeed","kbTop","kbMid","kbBot","urlData","location","href","navigate","urlSplit","split","length","seedData","parseInt","document","cookie","some","item","trim","startsWith","cookieData","find","row","fetch","then","r","text","handleResize","handleUrlChange","softReset","addEventListener","removeEventListener","temp","Math","floor","random","randGen","range","generateWord","st","Date","now","et","console","log","rand","word","resetGame","toString","submitGuess","guess","indexOf","ret","didWin","i","val","tempRight","push","tempMissed","tempWrong","tempHist","renderGuesses","guesses","map","g","marginBottom","renderGuess","c","backgroundColor","display","padding","margin","fontWeight","borderColor","toUpperCase","renderCurrent","filler","renderKeyBoard","t","k","m","b","substr","renderWorkspace","guessesTaken","rowsLeft","rows","maxWidth","position","top","right","left","e","isNaN","target","value","marginLeft","fontSize","navigator","clipboard","writeText","marginRight","marginTop","float","border","color","justifyContent","key","toLowerCase"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport rs from \"random-seed\"\nimport words1 from \"./files/shuffled_real_wordles.txt\"\nimport words2 from \"./files/combined_wordlist.txt\"\nimport { Navigate, useParams } from \"react-router\";\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n\n    const [devTools, toggleDev] = useState(0);\n    const [hardReset, toggleHardReset] = useState(0);\n\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n    \n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const [winCount, setWinCount] = useState(0);\n    const [winStreak, setWinStreak] = useState(0);\n\n    const [wordBank, setWordBank] = useState([]);\n    const [guessBank, setGuessBank] = useState([]);\n\n    const [showWord, toggleShowWord] = useState(false);\n    const [showIssue, toggleIssue] = useState(false);\n\n    const [started, toggleStarted] = useState(false);\n    const [startTime, setStartTime] = useState(0);\n    const [endTime, setEndTime] = useState(0);\n    const [totalTime, setTotalTime] = useState(0);\n\n    const [issue, setIssue] = useState(\"\")\n\n    const [seed, setSeed] = useState(0)\n\n    var gen = require('random-seed')\n\n    const [wordSeed, setWordSeed] = useState(0)\n    const [tempSeed, submitSeed] = useState(0)\n    const [parsedSeed, setParsedSeed] = useState(-1)\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'] \n\n    var urlData = window.location.href\n\n    const navigate = useNavigate()\n\n    useEffect(() => {\n\n        var urlSplit = urlData.split(\"wordle/\")\n\n\n\n        // if (!isNaN(parseInt(useParams().id))) {\n        //     var seedData = parseInt(useParams().id)\n        //     setParsedSeed(seedData)\n        // }\n\n        if (urlSplit.length > 1){\n            var seedData = parseInt(urlSplit[1])\n            setParsedSeed(seedData)\n        }\n\n        if (document.cookie\n                .split(\";\")\n                .some(item => item.trim().startsWith(\"k2wsr=\"))) {\n                    var cookieData = document.cookie.split('; ').find(row => row.startsWith('k2wsr=')).split('=')[1].split(',')\n                    setWinCount(parseInt(cookieData[0]))\n                    setWinStreak(parseInt(cookieData[1]))\n        } else {\n            document.cookie= \"k2wsr=0,0\"\n        }\n        \n        fetch(words1)\n            .then(r => r.text())\n            .then(text => {\n                setWordBank(text.split('\\n'))\n            })\n\n        fetch(words2)\n            .then(r => r.text())\n            .then(text => {\n                setGuessBank(text.split('\\n'))\n            })\n        \n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n        function handleUrlChange() {\n            softReset()\n\n            urlData = window.location.href\n            var urlSplit = urlData.split(\"wordle/\")\n\n\n            if (urlSplit.length > 1) {\n                setSeed(parseInt(urlSplit[1]))\n            }\n\n        }\n        window.addEventListener(\n            'hashchange',\n            handleUrlChange,\n            false\n        );\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n\n        \n    }, []);\n\n\n    useEffect(() => {\n        var temp = 0\n\n        if (parsedSeed > -1) {\n            temp = parsedSeed\n            setParsedSeed(-1)\n        } else {\n            temp = Math.floor(Math.random() * 10000)\n        }\n        // var temp = Math.floor(Math.random() * 10000)\n        \n        setSeed(temp)\n\n    }, [wordBank])\n\n    useEffect(() => { \n        var randGen = gen(seed);\n        setWordSeed(randGen.range(wordBank.length))\n    }, [seed])\n\n    useEffect(() => {\n        generateWord()\n    }, [wordSeed])\n\n    useEffect(() => {\n        if (winCount != 0) {\n            document.cookie = `k2wsr=${winCount},${winStreak}`\n        }\n        \n    }, [winCount, winStreak]) \n\n    useEffect(() => {\n        if (started) {\n            var st = Date.now()\n            setStartTime(st)\n        } else {\n            var et = Date.now()\n            setStartTime(et)\n        }\n        \n    }, [started])\n\n    useEffect(() => {\n        if (endTime > startTime && win) {\n            console.log(endTime - startTime)\n            setTotalTime(endTime-startTime)\n        }\n    }, [endTime])\n\n    const generateWord = () => {\n        var rand = wordSeed\n        var word = wordBank[wordSeed]\n        //var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n        setWord(word)\n    }\n\n    const softReset = () => {\n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n    }\n\n    const resetGame = () => {\n        \n        navigate('/wordle')\n        \n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n        if (seed.toString().length > 4) {\n            setSeed(seed + 1)\n        } else {\n            setSeed(Math.floor(Math.random() * 10000))\n        }\n        // setSeed(Math.floor(Math.random() * 10000))\n    }\n\n    const submitGuess = (guess) => {\n        if (!guess || guess.length != 5) {\n            setIssue(\"Guess must be 5 letters\")\n            toggleIssue(true)\n            console.log(\"Guess must be 5 letters\")\n        } else if (guessBank.indexOf(guess) < 0){\n            setIssue(\"Not a valid word\")\n            toggleIssue(true)\n            console.log(\"Not a word\")\n        } else {\n            setCount(guessCount + 1)\n            var ret = []\n            var didWin = true;\n\n            for (var i in guess) {\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    val = 0\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            \n\n            \n\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n            setGuess(\"\")\n            if (didWin) {\n                setWinCount(winCount + 1)\n                setWinStreak(winStreak + 1)\n                toggleStarted(false)\n                setEndTime(Date.now())\n                \n                // resetGame()\n            }\n            if (!didWin && guessCount >= 5) {\n                setWinStreak(0)\n                toggleShowWord(true)\n                toggleStarted(false)\n                setEndTime(Date.now())\n                \n                // resetGame()\n            }\n            \n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return []\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div style={{width: \"100%\", marginBottom: \"4.5px\"}}>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        // for (var i = 0; i < 6 - guesses.length; i++) {\n        //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n        // }\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"square\" style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}>\n                    <div className=\"content\">\n                        {c[0].toUpperCase()}\n                    </div>    \n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"square\"  style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"square\"  style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            <div className=\"content\">\n                                {c[0].toUpperCase()}\n                            </div>\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return (\n            <div className=\"flexbox\">\n                {c}\n            </div>\n        )\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == \"\") {\n            // have this be a bar with character height\n            return (\n                <div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                </div>\n            )\n        }\n\n        const r = currentGuess.split('').map((c) => (\n            <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>    \n                    </div>\n\n        ))\n\n        var filler = 5 - r.length\n\n        for (var i = 0; i < filler; i++) {\n            r.push(\n                <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                    <div className=\"content\">\n                        \n                    </div>    \n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {r}\n            </div>\n        )\n    }\n\n    const renderKeyBoard = () => {\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (!started) {\n                                toggleStarted(true)\n                            }\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (!started) {\n                                    toggleStarted(true)\n                                }\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div className=\"flexbox\">{t}</div>\n                <div className=\"flexbox\">{m}</div>\n                {/* add the backspace and enter keys in bottom row */}\n                <div className=\"flexbox\">\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (guessCount <= 5 && win == false) {\n                                // submitGuess(currentGuess.toLowerCase())\n                                setGuess(\"\")\n                                \n                            } else {\n                                resetGame()\n                            }\n                        }}  \n                    >\n                        Clear\n                    </div>\n                    {b}\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            setGuess(currentGuess.substr(0,currentGuess.length -1 ))\n                        }}  \n                    >\n                        Delete\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const renderWorkspace = () => {\n        var guessesTaken = renderGuesses().length\n        var rowsLeft = 5 - guessesTaken\n\n        var rows = []\n\n        for (var i = 0; i < rowsLeft; i++) {\n            rows.push(\n                <div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                    <div className=\"square\" style={{display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                        <div className=\"content\">\n                            \n                        </div>    \n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <div>\n                    {renderGuesses()}\n                </div>\n                {/* <div style={{display: \"block\", width: \"100%\", height: \"3px\"}}/> */}\n                {(guessCount < 6) ? (\n                    <div>\n                        {renderCurrent()}\n                    </div>\n                ) : (\n                    null\n                )}\n                \n                <div>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"testLanding\" style={{height: \"auto\"}}>\n            <div style={{width: \"100%\", maxWidth: \"750px\"}}>\n                {(devTools == 3) ? (\n                    <div  \n                        onClick={() => {\n                            toggleHardReset(hardReset + 1)\n                            if (hardReset == 2) {\n                                document.cookie= \"k2wsr=0,0\"\n                                setWinCount(parseInt(0))\n                                setWinStreak(parseInt(0))\n                                toggleHardReset(0)\n                            }\n                        }} \n                        style={{position: \"absolute\", backgroundColor: \"red\", top: \"0px\", right: \"0px\"}}\n                    >\n                        w: {windowDimensions.width}, h: {windowDimensions.height}\n                    </div>\n                    \n                ) : (\n                    null\n                )}\n\n                {(devTools == 3) ? (\n                    <div style={{position: \"absolute\", top: \"0px\", left: \"0px\"}}>\n                    <input\n                        \n                        onChange={(e) => {\n                            if (!isNaN(e.target.value)) {\n                                submitSeed(parseInt(e.target.value))\n                            } else {\n                                console.log(\"invalid\")\n                            }\n                        }}\n                    />\n                    <button\n                        onClick={() => {\n                            setSeed(tempSeed)\n                            toggleDev(0)\n                            submitSeed(0)\n                        }}\n                    >Set Seed</button>\n                    </div>\n                ) : (\n                    null\n                )}\n\n                {(windowDimensions.width > 800) ? (\n                    <div style={{width: '100%'}}>\n                        <div style={{display: \"inline-block\", width: \"60%\", marginLeft: \"20%\", fontWeight: 'bold', fontSize: \"48px\"}}>\n                            Wordle Sim\n                        </div>\n                        \n                        <div style={{display: \"inline-block\", fontSize: \"24px\", width: \"20%\"}}>\n                            <div>\n                                Wins: {winCount}\n                            </div>\n                            <div>\n                                Winstreak: {winStreak}\n                            </div>\n                        </div>\n                    </div>  \n                ) : (\n                    <div style={{width: '100%'}}>\n                        <div style={{display: \"inline-block\", width: \"60%\", marginLeft: \"20%\", fontWeight: 'bold', fontSize: \"36px\"}}>\n                            Wordle Sim\n                        </div>\n                        \n                        <div style={{display: \"inline-block\", fontSize: \"18px\", width: \"20%\"}}>\n                            <div>\n                                Wins: {winCount}\n                            </div>\n                            <div>\n                                Winstreak: {winStreak}\n                            </div>\n                        </div>\n                    </div> \n                )}\n\n                \n\n                {/* Wordle sim\n                <br/> */}\n\n                \n                \n\n                <br/>\n\n                <div>\n                    {renderWorkspace()}\n                </div>\n                \n                {(win && seed.toString().length < 5) ? (\n                    <div className=\"links\" onClick={() => {navigator.clipboard.writeText(`${urlData.split(\"wordle\")[0]}wordle/${seed}`)}}>\n                        {(totalTime)/1000}s, Seed: {seed}\n                    </div>\n                ) : (\n                    ((showWord || devTools == 3) && seed.toString().length < 5) ? (\n                        <div>{currentWord}, Seed: {seed}</div>\n                    ) : (\n                        (showIssue && seed.toString().length < 5) ? (\n                            <div>{issue}</div>\n                        ) : (\n                            null\n                            )\n                        )\n                )}\n\n                {(win && seed.toString().length >= 5) ? (\n                    <div>\n                        {(totalTime)/1000}s\n                    </div>\n                ) : (\n                    ((showWord || devTools == 3) && seed.toString().length >= 5) ? (\n                        <div>{currentWord}</div>\n                    ) : (\n                        (showIssue && seed.toString().length >= 5) ? (\n                            <div>{issue}</div>\n                        ) : (\n                            null\n                            )\n                        )\n                )}\n\n                <br/>\n                <div className=\"flexbox\">\n                <input\n                    className=\"ctButton\"\n                    style={{marginLeft: \"5%\", marginRight: \"5%\",marginTop:\"0\", float: \"left\", border: \"none\", backgroundColor: \"white\", color: \"black\", padding: \"12px\", width: \"30%\", justifyContent: \"center\"}}\n                    \n                    value={currentGuess}\n                    onChange={(e)=>{\n                        toggleIssue(false)\n                        if (!started) {\n                            toggleStarted(true)\n                        }\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n\n                        var temp = e.target.value.substr(0,5)\n\n\n                        setGuess(temp)\n\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            submitGuess(currentGuess.toLowerCase())\n                        }\n                    }}\n                />\n            \n                {(win) ? (\n                    <button \n                        onClick={() => {\n                            resetGame()\n                        }}\n                        className=\"wordleButton\"\n                        style={{padding: \"11px\", marginRight: \"5%\", width: \"60%\"}}\n                    >\n                        Continue\n                    </button>\n                ) : (\n                    <div style={{display: \"inline\", marginRight: \"5%\", width: \"60%\"}}>\n                        <button \n                            className=\"wordleButton\"\n                            style={{padding: \"11px\", width: \"40%\", marginRight: \"5%\"}}\n                            onClick={() => {\n                                if (guessCount <= 5 && win == false) {\n                                    submitGuess(currentGuess.toLowerCase())\n                                    \n                                } else {\n                                    resetGame()\n                                }\n                            \n                        }}>\n                            Submit\n                        </button>\n                        <button \n                            onClick={() => {\n                                if (guessCount == 0){\n                                    if (devTools == 3) {\n                                        toggleDev(0)\n                                    } else {\n                                        toggleDev(devTools + 1)\n                                    }\n                                } else {\n                                    toggleDev(0)\n                                }\n                                resetGame()\n                                toggleStarted(false)\n                                if (!win) {\n                                    setWinStreak(0)\n                                    if (guessCount <= 5) {\n                                        setSeed(Math.floor(Math.random() * 10000))\n                                    }\n                                }\n\n                                \n                            }}\n                            className=\"wordleReset\"\n                            style={{padding: \"11px\", width: \"40%\"}}\n                        >\n                            Reset\n                        </button>\n                    </div>\n                )}\n                \n                </div>\n\n                <br/>\n                <div>\n                    {renderKeyBoard()}\n                </div>\n                <br/>\n                <div>\n                    <a href='/' className=\"wordleButton\">Return to the main page</a>\n                </div>\n\n                <br/>\n            </div>\n        </div>\n    )\n}\n\nexport default Wordle;"]},"metadata":{},"sourceType":"module"}