{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport words1 from \"./files/shuffled_real_wordles.txt\";\nimport words2 from \"./files/combined_wordlist.txt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction Wordle() {\n  _s();\n\n  const [devTools, toggleDev] = useState(0);\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  const [win, setWin] = useState(false);\n  const [rightLetters, setRight] = useState([]);\n  const [missedLetters, setMissed] = useState([]);\n  const [wrongLetters, setWrong] = useState([]);\n  const [winCount, setWinCount] = useState(0);\n  const [winStreak, setWinStreak] = useState(0);\n  const [wordBank, setWordBank] = useState([]);\n  const [guessBank, setGuessBank] = useState([]);\n  const [showWord, toggleShowWord] = useState(false);\n  const [showIssue, toggleIssue] = useState(false);\n  const [issue, setIssue] = useState(\"\");\n  const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n  const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];\n  const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];\n  var wordList = [\"tower\", \"water\", \"actor\", \"agent\"];\n  useEffect(() => {\n    fetch(words1).then(r => r.text()).then(text => {\n      setWordBank(text.split('\\n'));\n    });\n    fetch(words2).then(r => r.text()).then(text => {\n      setGuessBank(text.split('\\n'));\n    });\n\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  useEffect(() => {\n    generateWord();\n  }, [wordBank]);\n\n  const generateWord = () => {\n    // for now get word from wordlist\n    var rand = Math.floor(Math.random() * wordBank.length); // console.log(rand)\n\n    var word = wordBank[Math.floor(Math.random() * wordBank.length)]; // console.log(word)\n\n    setWord(word);\n  };\n\n  const resetGame = () => {\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n    toggleShowWord(false);\n  };\n\n  const submitGuess = guess => {\n    if (!guess || guess.length != 5) {\n      setIssue(\"Guess must be 5 letters\");\n      toggleIssue(true);\n      console.log(\"Guess must be 5 letters\");\n    } else if (guessBank.indexOf(guess) < 0) {\n      setIssue(\"Not a valid word\");\n      toggleIssue(true);\n      console.log(\"Not a word\");\n    } else {\n      setCount(guessCount + 1);\n      var ret = [];\n      var didWin = true;\n\n      for (var i in guess) {\n        var val = -1;\n\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          val = 0;\n        }\n\n        if (val != 1) {\n          didWin = false;\n        }\n\n        if (val == 1) {\n          var tempRight = rightLetters;\n          tempRight.push(guess[i]);\n          setRight(tempRight);\n        }\n\n        if (val == 0) {\n          var tempMissed = missedLetters;\n          tempMissed.push(guess[i]);\n          setMissed(tempMissed);\n        }\n\n        if (val == -1) {\n          var tempWrong = wrongLetters;\n          tempWrong.push(guess[i]);\n          setWrong(tempWrong);\n        }\n\n        ret.push([guess[i], val]);\n      }\n\n      setWin(didWin);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n      setGuess(\"\");\n\n      if (didWin) {\n        setWinCount(winCount + 1);\n        setWinStreak(winStreak + 1); // resetGame()\n      }\n\n      if (!didWin && guessCount >= 5) {\n        setWinStreak(0);\n        toggleShowWord(true); // resetGame()\n      }\n    }\n\n    return ret;\n  };\n\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return [];\n    }\n\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"40px\",\n        width: \"100%\",\n        marginBottom: \"2px\"\n      },\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)); // for (var i = 0; i < 6 - guesses.length; i++) {\n    //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n    // }\n\n    return guesses;\n  };\n\n  const renderGuess = i => {\n    const c = i.map(c => c[1] == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this) : c[1] == 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }, this) : c[1] == -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: c[0].toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 26\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flexbox\",\n      children: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCurrent = () => {\n    if (currentGuess == \"\") {\n      // have this be a bar with character height\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this);\n    }\n\n    const r = currentGuess.split('').map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        display: \"inline-block\",\n        margin: \"1px\",\n        padding: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this));\n    var filler = 5 - r.length;\n\n    for (var i = 0; i < filler; i++) {\n      r.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordleLetter\",\n        style: {\n          display: \"inline-block\",\n          margin: \"1px\",\n          padding: \"1px\"\n        },\n        children: \"_\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 20\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: r\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderKeyBoard = () => {\n    const t = kbTop.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 25\n    }, this));\n    const m = kbMid.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 25\n    }, this));\n    const b = kbBot.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        toggleIssue(false);\n\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 25\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: m\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            width: \"auto\"\n          },\n          onClick: () => {\n            toggleIssue(false);\n\n            if (guessCount <= 5 && win == false) {\n              submitGuess(currentGuess.toLowerCase());\n            } else {\n              resetGame();\n            }\n          },\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 21\n        }, this), b, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            backgroundColor: \"gray\",\n            display: \"inline-block\",\n            padding: \"1px\",\n            margin: \"1px\",\n            width: \"auto\"\n          },\n          onClick: () => {\n            toggleIssue(false);\n            setGuess(currentGuess.substr(0, currentGuess.length - 1));\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderWorkspace = () => {\n    var guessesTaken = renderGuesses().length;\n    var rowsLeft = 5 - guessesTaken;\n    var rows = [];\n\n    for (var i = 0; i < rowsLeft; i++) {\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderGuesses()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }, this), guessCount < 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderCurrent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"testLanding\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        maxWidth: \"400px\",\n        backgroundColor: \"red\"\n      },\n      children: [devTools == 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          backgroundColor: \"red\",\n          top: \"0px\",\n          right: \"0px\"\n        },\n        children: [\"w: \", windowDimensions.width, \", h: \", windowDimensions.height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 21\n      }, this) : null, \"Wordle sim\", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Wins: \", winCount, \", Winstreak: \", winStreak]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderWorkspace()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 17\n      }, this), showWord ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 21\n      }, this) : null, showIssue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: issue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 21\n      }, this) : null, devTools == 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flexbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"ctButton\",\n          style: {\n            marginLeft: \"5%\",\n            marginRight: \"5%\",\n            marginTop: \"0\",\n            float: \"left\",\n            border: \"none\",\n            backgroundColor: \"white\",\n            color: \"black\",\n            padding: \"12px\",\n            width: \"50%\",\n            justifyContent: \"center\"\n          },\n          value: currentGuess,\n          onChange: e => {\n            toggleIssue(false);\n\n            if (win || guessCount >= 6) {\n              resetGame();\n            }\n\n            var temp = e.target.value.substr(0, 5);\n            setGuess(temp);\n          },\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              if (win || guessCount >= 6) {\n                resetGame();\n              }\n\n              submitGuess(currentGuess.toLowerCase());\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 17\n        }, this), win ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            resetGame();\n          },\n          className: \"wordleButton\",\n          style: {\n            padding: \"11px\",\n            marginLeft: \"5%\",\n            marginRight: \"5%\"\n          },\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"5%\",\n            marginRight: \"5%\",\n            display: \"inline\",\n            width: \"50%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"wordleButton\",\n            style: {\n              padding: \"11px\"\n            },\n            onClick: () => {\n              if (guessCount <= 5 && win == false) {\n                submitGuess(currentGuess.toLowerCase());\n              } else {\n                resetGame();\n              }\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log(devTools);\n\n              if (guessCount == 0) {\n                if (devTools == 3) {\n                  toggleDev(0);\n                } else {\n                  toggleDev(devTools + 1);\n                }\n              } else {\n                toggleDev(0);\n              }\n\n              resetGame();\n\n              if (!win) {\n                setWinStreak(0);\n              }\n            },\n            className: \"wordleReset\",\n            style: {\n              padding: \"11px\"\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderKeyBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          className: \"wordleButton\",\n          children: \"Return to the main page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 557,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Wordle, \"cIGxUJZr0gkwTQg7yujS1/ZG9iw=\");\n\n_c = Wordle;\nexport default Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"names":["useEffect","useState","axios","words1","words2","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","devTools","toggleDev","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","winCount","setWinCount","winStreak","setWinStreak","wordBank","setWordBank","guessBank","setGuessBank","showWord","toggleShowWord","showIssue","toggleIssue","issue","setIssue","kbTop","kbMid","kbBot","wordList","fetch","then","r","text","split","handleResize","addEventListener","removeEventListener","generateWord","rand","Math","floor","random","length","word","resetGame","submitGuess","guess","console","log","indexOf","ret","didWin","i","val","tempRight","push","tempMissed","tempWrong","tempHist","renderGuesses","guesses","map","g","marginBottom","renderGuess","c","backgroundColor","display","padding","margin","fontWeight","borderColor","toUpperCase","renderCurrent","filler","renderKeyBoard","t","k","m","b","toLowerCase","substr","renderWorkspace","guessesTaken","rowsLeft","rows","maxWidth","position","top","right","marginLeft","marginRight","marginTop","float","border","color","justifyContent","e","temp","target","value","key"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport words1 from \"./files/shuffled_real_wordles.txt\"\nimport words2 from \"./files/combined_wordlist.txt\"\n\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n\n    const [devTools, toggleDev] = useState(0);\n\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n    \n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const [winCount, setWinCount] = useState(0);\n    const [winStreak, setWinStreak] = useState(0);\n\n    const [wordBank, setWordBank] = useState([]);\n    const [guessBank, setGuessBank] = useState([]);\n\n    const [showWord, toggleShowWord] = useState(false);\n    const [showIssue, toggleIssue] = useState(false);\n\n    const [issue, setIssue] = useState(\"\")\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n\n    var wordList = [\"tower\", \"water\", \"actor\", \"agent\"]\n\n    useEffect(() => {\n        \n        fetch(words1)\n            .then(r => r.text())\n            .then(text => {\n                setWordBank(text.split('\\n'))\n            })\n\n        fetch(words2)\n            .then(r => r.text())\n            .then(text => {\n                setGuessBank(text.split('\\n'))\n            })\n        \n\n        \n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    useEffect(() => {\n        generateWord()\n    }, [wordBank])\n\n    const generateWord = () => {\n        // for now get word from wordlist\n        var rand = Math.floor(Math.random() * wordBank.length)\n        // console.log(rand)\n        var word = wordBank[Math.floor(Math.random() * wordBank.length)]\n        // console.log(word)\n        setWord(word)\n    }\n\n    const resetGame = () => {\n        \n\n\n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n        toggleShowWord(false)\n    }\n\n    const submitGuess = (guess) => {\n        if (!guess || guess.length != 5) {\n            setIssue(\"Guess must be 5 letters\")\n            toggleIssue(true)\n            console.log(\"Guess must be 5 letters\")\n        } else if (guessBank.indexOf(guess) < 0){\n            setIssue(\"Not a valid word\")\n            toggleIssue(true)\n            console.log(\"Not a word\")\n        } else {\n            setCount(guessCount + 1)\n            var ret = []\n            var didWin = true;\n\n            for (var i in guess) {\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    val = 0\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            \n\n            \n\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n            setGuess(\"\")\n            if (didWin) {\n                setWinCount(winCount + 1)\n                setWinStreak(winStreak + 1)\n                // resetGame()\n            }\n            if (!didWin && guessCount >= 5) {\n                setWinStreak(0)\n                toggleShowWord(true)\n                // resetGame()\n            }\n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return []\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div style={{height: \"40px\", width: \"100%\", marginBottom: \"2px\"}}>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        // for (var i = 0; i < 6 - guesses.length; i++) {\n        //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n        // }\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"square\" style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}>\n                    <div className=\"content\">\n                        {c[0].toUpperCase()}\n                    </div>\n                    \n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"square\"  style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}>\n                        <div className=\"content\">\n                            {c[0].toUpperCase()}\n                        </div>\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"square\"  style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            <div className=\"content\">\n                                {c[0].toUpperCase()}\n                            </div>\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return (\n            <div className=\"flexbox\">\n                {c}\n            </div>\n        )\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == \"\") {\n            // have this be a bar with character height\n            return (\n                <div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                </div>\n            )\n        }\n\n        const r = currentGuess.split('').map((c) => (\n            <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\", fontWeight: \"bold\"}}>\n                {c[0].toUpperCase()}\n            </div>\n        ))\n\n        var filler = 5 - r.length\n\n        for (var i = 0; i < filler; i++) {\n            r.push(<div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>)\n        }\n\n        return (\n            <div>\n                {r}\n            </div>\n        )\n    }\n\n    const renderKeyBoard = () => {\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                toggleIssue(false)\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div className=\"flexbox\">{t}</div>\n                <div className=\"flexbox\">{m}</div>\n                {/* add the backspace and enter keys in bottom row */}\n                <div className=\"flexbox\">\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            if (guessCount <= 5 && win == false) {\n                                submitGuess(currentGuess.toLowerCase())\n                                \n                            } else {\n                                resetGame()\n                            }\n                        }}  \n                    >\n                        Enter\n                    </div>\n                    {b}\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", width: \"auto\"}}\n                        onClick={() => {\n                            toggleIssue(false)\n                            setGuess(currentGuess.substr(0,currentGuess.length -1 ))\n                        }}  \n                    >\n                        Delete\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const renderWorkspace = () => {\n        var guessesTaken = renderGuesses().length\n        var rowsLeft = 5 - guessesTaken\n\n        var rows = []\n\n        for (var i = 0; i < rowsLeft; i++) {\n            rows.push(\n                <div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <div>\n                    {renderGuesses()}\n                </div>\n                {/* <div style={{display: \"block\", width: \"100%\", height: \"1px\"}}/> */}\n                {(guessCount < 6) ? (\n                    <div>\n                        {renderCurrent()}\n                    </div>\n                ) : (\n                    null\n                )}\n                \n                <div>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"testLanding\">\n            <div style={{width: \"100%\", maxWidth: \"400px\", backgroundColor: \"red\"}}>\n                {(devTools == 3) ? (\n                    <div style={{position: \"absolute\", backgroundColor: \"red\", top: \"0px\", right: \"0px\"}}>\n                        w: {windowDimensions.width}, h: {windowDimensions.height}\n                    </div>\n                ) : (\n                    null\n                )}\n\n                Wordle sim\n                <div>\n                    Wins: {winCount}, Winstreak: {winStreak}\n                </div>\n\n                <br/>\n                <br/>\n\n                <div>\n                    {renderWorkspace()}\n                </div>\n                {(showWord) ? (\n                    <div>{currentWord}</div>\n                ) : (null)}\n                {(showIssue) ? (\n                    <div>{issue}</div>\n                ) : (null)}\n                {(devTools == 3) ? (\n                    <div>\n                        {currentWord}\n                    </div>\n                ) : (\n                    null\n                )}\n                <br/>\n                <div className=\"flexbox\">\n                <input\n                    className=\"ctButton\"\n                    style={{marginLeft: \"5%\", marginRight: \"5%\",marginTop:\"0\", float: \"left\", border: \"none\", backgroundColor: \"white\", color: \"black\", padding: \"12px\", width: \"50%\", justifyContent: \"center\"}}\n                    \n                    value={currentGuess}\n                    onChange={(e)=>{\n                        toggleIssue(false)\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n\n                        var temp = e.target.value.substr(0,5)\n\n\n                        setGuess(temp)\n\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            submitGuess(currentGuess.toLowerCase())\n                        }\n                    }}\n                />\n            \n                {(win) ? (\n                    <button \n                        onClick={() => {\n                            resetGame()\n                        }}\n                        className=\"wordleButton\"\n                        style={{padding: \"11px\", marginLeft: \"5%\", marginRight: \"5%\",}}\n                    >\n                        Continue\n                    </button>\n                ) : (\n                    <div style={{marginLeft: \"5%\", marginRight: \"5%\",display: \"inline\", width: \"50%\"}}>\n                    <button \n                    className=\"wordleButton\"\n                    style={{padding: \"11px\"}}\n                    onClick={() => {\n                        if (guessCount <= 5 && win == false) {\n                            submitGuess(currentGuess.toLowerCase())\n                            \n                        } else {\n                            resetGame()\n                        }\n                    \n                }}>\n                    Submit\n                </button>\n                    <button \n                        onClick={() => {\n                            console.log(devTools)\n                            if (guessCount == 0){\n                                if (devTools == 3) {\n                                    toggleDev(0)\n                                } else {\n                                    toggleDev(devTools + 1)\n                                }\n                            } else {\n                                toggleDev(0)\n                            }\n                            resetGame()\n                            if (!win) {\n                                setWinStreak(0)\n                            }\n                            \n                        }}\n                        className=\"wordleReset\"\n                        style={{padding: \"11px\"}}\n                    >\n                        Reset\n                    </button>\n                    </div>\n                )}\n                \n                </div>\n\n                \n\n                <br/>\n                {/* <div>\n                    {renderGuesses()}\n                </div>\n                <div>{renderCurrent()}</div> */}\n                <br/>\n                <div>\n                    {renderKeyBoard()}\n                </div>\n                <br/>\n                <div>\n                    <a href='/' className=\"wordleButton\">Return to the main page</a>\n                </div>\n\n                <br/>\n            </div>\n        </div>\n    )\n}\n\nexport default Wordle;"]},"metadata":{},"sourceType":"module"}