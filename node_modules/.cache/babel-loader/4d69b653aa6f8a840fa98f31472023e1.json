{"ast":null,"code":"var _jsxFileName = \"/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport words from \"./files/words.txt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction Wordle() {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  const [currentWord, setWord] = useState(\"\");\n  const [currentGuess, setGuess] = useState(\"\");\n  const [guessCount, setCount] = useState(0);\n  const [guessHistory, setHistory] = useState([]);\n  const [win, setWin] = useState(false);\n  const [rightLetters, setRight] = useState([]);\n  const [missedLetters, setMissed] = useState([]);\n  const [wrongLetters, setWrong] = useState([]);\n  const [winCount, setWinCount] = useState(0);\n  const [winStreak, setWinStreak] = useState(0);\n  const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n  const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];\n  const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm'];\n  var wordList = [\"tower\", \"water\", \"actor\", \"agent\"];\n  useEffect(() => {\n    generateWord();\n\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const generateWord = () => {\n    // for now get word from wordlist\n    var rand = 0;\n    var word = wordList[rand];\n    setWord(word);\n  };\n\n  const resetGame = () => {\n    generateWord();\n    setCount(0);\n    setHistory([]);\n    setWin(false);\n    setGuess(\"\");\n    setRight([]);\n    setWrong([]);\n    setMissed([]);\n  };\n\n  const submitGuess = guess => {\n    if (!guess || guess.length != 5) {\n      console.log(\"Guess must be 5 letters\");\n    } else {\n      setCount(guessCount + 1);\n      var ret = [];\n      var didWin = true;\n\n      for (var i in guess) {\n        var val = -1;\n\n        if (guess[i] == currentWord[i]) {\n          val = 1;\n        } else if (currentWord.indexOf(guess[i]) >= 0) {\n          val = 0;\n        }\n\n        if (val != 1) {\n          didWin = false;\n        }\n\n        if (val == 1) {\n          var tempRight = rightLetters;\n          tempRight.push(guess[i]);\n          setRight(tempRight);\n        }\n\n        if (val == 0) {\n          var tempMissed = missedLetters;\n          tempMissed.push(guess[i]);\n          setMissed(tempMissed);\n        }\n\n        if (val == -1) {\n          var tempWrong = wrongLetters;\n          tempWrong.push(guess[i]);\n          setWrong(tempWrong);\n        }\n\n        ret.push([guess[i], val]);\n      }\n\n      setWin(didWin);\n      var tempHist = guessHistory;\n      tempHist.push(ret);\n      setHistory(tempHist);\n      setGuess(\"\");\n\n      if (didWin) {\n        setWinCount(winCount + 1);\n        setWinStreak(winStreak + 1); // resetGame()\n      }\n\n      if (!didWin && guessCount >= 5) {\n        setWinStreak(0); // resetGame()\n      }\n    }\n\n    return ret;\n  };\n\n  const renderGuesses = () => {\n    if (guessHistory.length == 0) {\n      return [];\n    }\n\n    const guesses = guessHistory.map(g => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"40px\",\n        width: \"100%\",\n        marginBottom: \"2px\"\n      },\n      children: renderGuess(g)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)); // for (var i = 0; i < 6 - guesses.length; i++) {\n    //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n    // }\n\n    return guesses;\n  };\n\n  const renderGuess = i => {\n    const c = i.map(c => c[1] == 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this) : c[1] == 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }, this) : c[1] == -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 26\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCurrent = () => {\n    if (currentGuess == \"\") {\n      // have this be a bar with character height\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this);\n    }\n\n    const r = currentGuess.split('').map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        display: \"inline-block\",\n        margin: \"1px\",\n        padding: \"1px\",\n        fontWeight: \"bold\"\n      },\n      children: c[0].toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this));\n    var filler = 5 - r.length;\n\n    for (var i = 0; i < filler; i++) {\n      r.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordleLetter\",\n        style: {\n          display: \"inline-block\",\n          margin: \"1px\",\n          padding: \"1px\"\n        },\n        children: \"_\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 20\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"block\"\n      },\n      children: r\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderKeyBoard = () => {\n    const t = kbTop.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 25\n    }, this));\n    const m = kbMid.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 25\n    }, this));\n    const b = kbBot.map(k => rightLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"green\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"green\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }, this) : missedLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"#cdab4b\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\",\n        borderColor: \"#cdab4b\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }, this) : wrongLetters.indexOf(k) != -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"black\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordleLetter\",\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        padding: \"1px\",\n        margin: \"1px\",\n        fontWeight: \"bold\"\n      },\n      onClick: () => {\n        if (win || guessCount >= 6) {\n          resetGame();\n        }\n\n        if (currentGuess.length < 5) {\n          setGuess(currentGuess + k);\n        }\n      },\n      children: k.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 25\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: m\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: b\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderWorkspace = () => {\n    var guessesTaken = renderGuesses().length;\n    var rowsLeft = 5 - guessesTaken;\n    var rows = [];\n\n    for (var i = 0; i < rowsLeft; i++) {\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordleLetter\",\n          style: {\n            display: \"inline-block\",\n            margin: \"1px\",\n            padding: \"1px\"\n          },\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderGuesses()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"block\",\n          width: \"100%\",\n          height: \"1px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }, this), guessCount < 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderCurrent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"testLanding\",\n    children: [\"Wordle sim\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Wins: \", winCount, \", Winstreak: \", winStreak]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderWorkspace()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"ctButton\",\n        style: {\n          margin: \"none\",\n          marginTop: \"0\",\n          float: \"left\",\n          border: \"none\",\n          backgroundColor: \"white\",\n          color: \"black\",\n          padding: \"12px\"\n        },\n        value: currentGuess,\n        onChange: e => {\n          if (win || guessCount >= 6) {\n            resetGame();\n          }\n\n          var temp = e.target.value.substr(0, 5);\n          setGuess(temp);\n        },\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            if (win || guessCount >= 6) {\n              resetGame();\n            }\n\n            submitGuess(currentGuess.toLowerCase());\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"wordleButton\",\n        style: {\n          marginLeft: \"15px\",\n          padding: \"11px\"\n        },\n        onClick: () => {\n          if (guessCount <= 6 && win == false) {\n            submitGuess(currentGuess.toLowerCase());\n          }\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          resetGame();\n          setWinStreak(0);\n          setWinCount(0);\n        },\n        className: \"wordleReset\",\n        style: {\n          marginLeft: \"15px\",\n          padding: \"11px\"\n        },\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderKeyBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"wordleButton\",\n        children: \"Return to the main page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 466,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Wordle, \"PXNIbe2esFrTqgZAagsEwp+7M4k=\");\n\n_c = Wordle;\nexport default Wordle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"sources":["/Users/ktu/Documents/KayToo2022.github.io/src/Components/Wordle.js"],"names":["useEffect","useState","axios","words","getWindowDimensions","innerWidth","width","innerHeight","height","window","Wordle","windowDimensions","setWindowDimensions","currentWord","setWord","currentGuess","setGuess","guessCount","setCount","guessHistory","setHistory","win","setWin","rightLetters","setRight","missedLetters","setMissed","wrongLetters","setWrong","winCount","setWinCount","winStreak","setWinStreak","kbTop","kbMid","kbBot","wordList","generateWord","handleResize","addEventListener","removeEventListener","rand","word","resetGame","submitGuess","guess","length","console","log","ret","didWin","i","val","indexOf","tempRight","push","tempMissed","tempWrong","tempHist","renderGuesses","guesses","map","g","marginBottom","renderGuess","c","backgroundColor","display","padding","margin","fontWeight","borderColor","toUpperCase","renderCurrent","r","split","filler","renderKeyBoard","t","k","m","b","renderWorkspace","guessesTaken","rowsLeft","rows","marginTop","float","border","color","e","temp","target","value","substr","key","toLowerCase","marginLeft"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport words from \"./files/words.txt\"\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nfunction Wordle() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [currentWord, setWord] = useState(\"\");\n    const [currentGuess, setGuess] = useState(\"\");\n    const [guessCount, setCount] = useState(0);\n    const [guessHistory, setHistory] = useState([]);\n    const [win, setWin] = useState(false);\n\n    const [rightLetters, setRight] = useState([]);\n    const [missedLetters, setMissed] = useState([]);\n    const [wrongLetters, setWrong] = useState([]);\n\n    const [winCount, setWinCount] = useState(0);\n    const [winStreak, setWinStreak] = useState(0);\n\n    const kbTop = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    const kbMid = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    const kbBot = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n\n    var wordList = [\"tower\", \"water\", \"actor\", \"agent\"]\n\n    useEffect(() => {\n        generateWord()\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const generateWord = () => {\n        // for now get word from wordlist\n        var rand = 0\n        var word = wordList[rand]\n        setWord(word)\n    }\n\n    const resetGame = () => {\n        generateWord()\n        setCount(0)\n        setHistory([])\n        setWin(false)\n        setGuess(\"\")\n        setRight([])\n        setWrong([])\n        setMissed([])\n    }\n\n    const submitGuess = (guess) => {\n        if (!guess || guess.length != 5) {\n            console.log(\"Guess must be 5 letters\")\n        } else {\n            setCount(guessCount + 1)\n            var ret = []\n            var didWin = true;\n\n            for (var i in guess) {\n                var val = -1\n                \n                if (guess[i] == currentWord[i]) {\n                    val = 1\n                } else if (currentWord.indexOf(guess[i]) >= 0) {\n                    val = 0\n                }\n\n                if (val != 1) {\n                    didWin = false\n                }\n\n                if (val == 1) {\n                    var tempRight = rightLetters\n                    tempRight.push(guess[i])\n                    setRight(tempRight)\n                }\n\n                if (val == 0) {\n                    var tempMissed = missedLetters\n                    tempMissed.push(guess[i])\n                    setMissed(tempMissed)\n                }\n\n                if (val == -1) {\n                    var tempWrong = wrongLetters\n                    tempWrong.push(guess[i])\n                    setWrong(tempWrong)\n                }\n                ret.push([guess[i], val])\n            }\n            \n\n            \n\n            setWin(didWin)\n            var tempHist = guessHistory\n            tempHist.push(ret)\n            setHistory(tempHist)\n            setGuess(\"\")\n            if (didWin) {\n                setWinCount(winCount + 1)\n                setWinStreak(winStreak + 1)\n                // resetGame()\n            }\n            if (!didWin && guessCount >= 5) {\n                setWinStreak(0)\n                // resetGame()\n            }\n        }\n        return ret\n    }\n\n    const renderGuesses = () => {\n        if (guessHistory.length == 0) {\n            return []\n        }\n\n        const guesses = guessHistory.map((g) => (\n            <div style={{height: \"40px\", width: \"100%\", marginBottom: \"2px\"}}>\n                {renderGuess(g)}\n            </div>\n        ))\n\n        // for (var i = 0; i < 6 - guesses.length; i++) {\n        //     guesses.push(<div style={{height: \"40px\", width: \"100%\"}}/>)\n        // }\n        return guesses\n    }\n\n    const renderGuess = (i) => {\n        const c = i.map((c) => (\n            (c[1] == 0) ? (\n                <div className=\"wordleLetter\" style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}>\n                    {c[0].toUpperCase()}\n                </div>\n            ) : (\n                (c[1] == 1) ? (\n                    <div className=\"wordleLetter\"  style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}>\n                        {c[0].toUpperCase()}\n                    </div>\n                ) : (\n                    (c[1] == -1) ? (\n                        <div className=\"wordleLetter\"  style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}>\n                            {c[0].toUpperCase()}\n                        </div>\n                    ) : (<div>error</div>)\n                )\n            )   \n        ))\n        return (\n            <div>\n                {c}\n            </div>\n        )\n    }\n\n    const renderCurrent = () => {\n        if (currentGuess == \"\") {\n            // have this be a bar with character height\n            return (\n                <div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                </div>\n            )\n        }\n\n        const r = currentGuess.split('').map((c) => (\n            <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\", fontWeight: \"bold\"}}>\n                {c[0].toUpperCase()}\n            </div>\n        ))\n\n        var filler = 5 - r.length\n\n        for (var i = 0; i < filler; i++) {\n            r.push(<div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>)\n        }\n\n        return (\n            <div style={{display: \"block\"}}>\n                {r}\n            </div>\n        )\n    }\n\n    const renderKeyBoard = () => {\n        const t = kbTop.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const m = kbMid.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        const b = kbBot.map((k) => (\n            (rightLetters.indexOf(k) != -1) ? (\n                <div \n                    className=\"wordleLetter\"  \n                    style={{backgroundColor: \"green\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"green\"}}\n                    onClick={() => {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        if (currentGuess.length < 5) {\n                            \n                            setGuess(currentGuess+k)\n                        }\n                    }}    \n                >\n                    {k.toUpperCase()}\n                </div>\n            ) : (\n                (missedLetters.indexOf(k) != -1) ? (\n                    <div \n                        className=\"wordleLetter\"  \n                        style={{backgroundColor: \"#cdab4b\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\", borderColor: \"#cdab4b\"}}\n                        onClick={() => {\n                            if (win || guessCount >=6) {\n                                resetGame()\n                            }\n                            if (currentGuess.length < 5) {\n                                \n                                setGuess(currentGuess+k)\n                            }\n                        }}  \n                    >\n                        {k.toUpperCase()}\n                    </div>\n                ) : (\n                    (wrongLetters.indexOf(k) != -1) ? (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"black\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    ) : (\n                        <div \n                            className=\"wordleLetter\"  \n                            style={{backgroundColor: \"gray\", display: \"inline-block\", padding: \"1px\", margin: \"1px\", fontWeight: \"bold\"}}\n                            onClick={() => {\n                                if (win || guessCount >=6) {\n                                    resetGame()\n                                }\n                                if (currentGuess.length < 5) {\n                                    \n                                    setGuess(currentGuess+k)\n                                }\n                            }}  \n                        >\n                            {k.toUpperCase()}\n                        </div>\n                    )\n                )\n            )\n        ))\n\n        return (\n            <div>\n                <div>{t}</div>\n                <div>{m}</div>\n                {/* add the backspace and enter keys in bottom row */}\n                <div>{b}</div>\n            </div>\n        )\n    }\n\n    const renderWorkspace = () => {\n        var guessesTaken = renderGuesses().length\n        var rowsLeft = 5 - guessesTaken\n\n        var rows = []\n\n        for (var i = 0; i < rowsLeft; i++) {\n            rows.push(\n                <div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                    <div className=\"wordleLetter\" style={{display: \"inline-block\", margin: \"1px\", padding:\"1px\"}}>_</div>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <div>\n                    {renderGuesses()}\n                </div>\n                <div style={{display: \"block\", width: \"100%\", height: \"1px\"}}/>\n                {(guessCount < 6) ? (\n                    <div>\n                        {renderCurrent()}\n                    </div>\n                ) : (\n                    null\n                )}\n                \n                <div>\n                    {rows}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"testLanding\">\n            Wordle sim\n            <div>\n                Wins: {winCount}, Winstreak: {winStreak}\n            </div>\n\n            <br/>\n            <br/>\n            <div>\n                {renderWorkspace()}\n            </div>\n            <br/>\n            <div>\n            <input\n                className=\"ctButton\"\n                style={{margin: \"none\", marginTop:\"0\", float: \"left\", border: \"none\", backgroundColor: \"white\", color: \"black\", padding: \"12px\"}}\n                \n                value={currentGuess}\n                onChange={(e)=>{\n                    if (win || guessCount >=6) {\n                        resetGame()\n                    }\n\n                    var temp = e.target.value.substr(0,5)\n\n\n                    setGuess(temp)\n\n                }}\n                onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                        if (win || guessCount >=6) {\n                            resetGame()\n                        }\n                        submitGuess(currentGuess.toLowerCase())\n                    }\n                }}\n            />\n            <button \n                className=\"wordleButton\"\n                style={{marginLeft: \"15px\", padding: \"11px\"}}\n                onClick={() => {\n                    if (guessCount <= 6 && win == false) {\n                        submitGuess(currentGuess.toLowerCase())\n                        \n                    }\n                \n            }}>\n                Submit\n            </button>\n            <button \n                onClick={() => {\n                    resetGame()\n                    setWinStreak(0)\n                    setWinCount(0)\n                }}\n                className=\"wordleReset\"\n                style={{marginLeft: \"15px\", padding: \"11px\"}}\n            >\n                Reset\n            </button>\n            </div>\n            <br/>\n            {/* <div>\n                {renderGuesses()}\n            </div>\n            <div>{renderCurrent()}</div> */}\n            <br/>\n            <div>\n                {renderKeyBoard()}\n            </div>\n            <br/>\n            <div>\n                <a href='/' className=\"wordleButton\">Return to the main page</a>\n            </div>\n\n            {/* <button onclick={()=> {\n                console.log(words)\n            }}>\n                test\n            </button> */}\n            <br/>\n            \n        </div>\n    )\n}\n\nexport default Wordle;"]},"metadata":{},"sourceType":"module"}